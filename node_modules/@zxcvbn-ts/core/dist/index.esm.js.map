{"version":3,"file":"index.esm.js","sources":["../src/index.ts"],"sourcesContent":["import Matching from './Matching';\nimport scoring from './scoring';\nimport TimeEstimates from './TimeEstimates';\nimport Feedback from './Feedback';\nimport { zxcvbnOptions, Options } from './Options';\nimport debounce from './debounce';\nconst time = () => new Date().getTime();\nconst createReturnValue = (resolvedMatches, password, start) => {\n    const feedback = new Feedback();\n    const timeEstimates = new TimeEstimates();\n    const matchSequence = scoring.mostGuessableMatchSequence(password, resolvedMatches);\n    const calcTime = time() - start;\n    const attackTimes = timeEstimates.estimateAttackTimes(matchSequence.guesses);\n    return {\n        calcTime,\n        ...matchSequence,\n        ...attackTimes,\n        feedback: feedback.getFeedback(attackTimes.score, matchSequence.sequence),\n    };\n};\nconst main = (password, userInputs) => {\n    if (userInputs) {\n        zxcvbnOptions.extendUserInputsDictionary(userInputs);\n    }\n    const matching = new Matching();\n    return matching.match(password);\n};\nexport const zxcvbn = (password, userInputs) => {\n    const start = time();\n    const matches = main(password, userInputs);\n    if (matches instanceof Promise) {\n        throw new Error('You are using a Promised matcher, please use `zxcvbnAsync` for it.');\n    }\n    return createReturnValue(matches, password, start);\n};\nexport const zxcvbnAsync = async (password, userInputs) => {\n    const usedPassword = password.substring(0, zxcvbnOptions.maxLength);\n    const start = time();\n    const matches = await main(usedPassword, userInputs);\n    return createReturnValue(matches, usedPassword, start);\n};\nexport * from './types';\nexport { zxcvbnOptions, Options, debounce };\n//# sourceMappingURL=index.js.map"],"names":["time","Date","getTime","createReturnValue","resolvedMatches","password","start","feedback","Feedback","timeEstimates","TimeEstimates","matchSequence","scoring","mostGuessableMatchSequence","calcTime","attackTimes","estimateAttackTimes","guesses","getFeedback","score","sequence","main","userInputs","zxcvbnOptions","extendUserInputsDictionary","matching","Matching","match","zxcvbn","matches","Promise","Error","zxcvbnAsync","usedPassword","substring","maxLength"],"mappings":";;;;;;;;AAMA,MAAMA,IAAI,GAAGA,MAAM,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE,CAAA;AACvC,MAAMC,iBAAiB,GAAGA,CAACC,eAAe,EAAEC,QAAQ,EAAEC,KAAK,KAAK;AAC5D,EAAA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE,CAAA;AAC/B,EAAA,MAAMC,aAAa,GAAG,IAAIC,aAAa,EAAE,CAAA;EACzC,MAAMC,aAAa,GAAGC,OAAO,CAACC,0BAA0B,CAACR,QAAQ,EAAED,eAAe,CAAC,CAAA;AACnF,EAAA,MAAMU,QAAQ,GAAGd,IAAI,EAAE,GAAGM,KAAK,CAAA;EAC/B,MAAMS,WAAW,GAAGN,aAAa,CAACO,mBAAmB,CAACL,aAAa,CAACM,OAAO,CAAC,CAAA;EAC5E,OAAO;IACHH,QAAQ;AACR,IAAA,GAAGH,aAAa;AAChB,IAAA,GAAGI,WAAW;IACdR,QAAQ,EAAEA,QAAQ,CAACW,WAAW,CAACH,WAAW,CAACI,KAAK,EAAER,aAAa,CAACS,QAAQ,CAAA;GAC3E,CAAA;AACL,CAAC,CAAA;AACD,MAAMC,IAAI,GAAGA,CAAChB,QAAQ,EAAEiB,UAAU,KAAK;AACnC,EAAA,IAAIA,UAAU,EAAE;AACZC,IAAAA,aAAa,CAACC,0BAA0B,CAACF,UAAU,CAAC,CAAA;AACxD,GAAA;AACA,EAAA,MAAMG,QAAQ,GAAG,IAAIC,QAAQ,EAAE,CAAA;AAC/B,EAAA,OAAOD,QAAQ,CAACE,KAAK,CAACtB,QAAQ,CAAC,CAAA;AACnC,CAAC,CAAA;MACYuB,MAAM,GAAGA,CAACvB,QAAQ,EAAEiB,UAAU,KAAK;AAC5C,EAAA,MAAMhB,KAAK,GAAGN,IAAI,EAAE,CAAA;AACpB,EAAA,MAAM6B,OAAO,GAAGR,IAAI,CAAChB,QAAQ,EAAEiB,UAAU,CAAC,CAAA;EAC1C,IAAIO,OAAO,YAAYC,OAAO,EAAE;AAC5B,IAAA,MAAM,IAAIC,KAAK,CAAC,oEAAoE,CAAC,CAAA;AACzF,GAAA;AACA,EAAA,OAAO5B,iBAAiB,CAAC0B,OAAO,EAAExB,QAAQ,EAAEC,KAAK,CAAC,CAAA;AACtD,EAAC;AACM,MAAM0B,WAAW,GAAG,OAAO3B,QAAQ,EAAEiB,UAAU,KAAK;EACvD,MAAMW,YAAY,GAAG5B,QAAQ,CAAC6B,SAAS,CAAC,CAAC,EAAEX,aAAa,CAACY,SAAS,CAAC,CAAA;AACnE,EAAA,MAAM7B,KAAK,GAAGN,IAAI,EAAE,CAAA;EACpB,MAAM6B,OAAO,GAAG,MAAMR,IAAI,CAACY,YAAY,EAAEX,UAAU,CAAC,CAAA;AACpD,EAAA,OAAOnB,iBAAiB,CAAC0B,OAAO,EAAEI,YAAY,EAAE3B,KAAK,CAAC,CAAA;AAC1D;;;;"}