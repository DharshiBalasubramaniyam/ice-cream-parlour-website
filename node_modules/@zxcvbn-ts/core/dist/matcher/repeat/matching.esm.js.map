{"version":3,"file":"matching.esm.js","sources":["../../../src/matcher/repeat/matching.ts"],"sourcesContent":["import scoring from '../../scoring';\n/*\n *-------------------------------------------------------------------------------\n * repeats (aaa, abcabcabc) ------------------------------\n *-------------------------------------------------------------------------------\n */\nclass MatchRepeat {\n    // eslint-disable-next-line max-statements\n    match({ password, omniMatch }) {\n        const matches = [];\n        let lastIndex = 0;\n        while (lastIndex < password.length) {\n            const greedyMatch = this.getGreedyMatch(password, lastIndex);\n            const lazyMatch = this.getLazyMatch(password, lastIndex);\n            if (greedyMatch == null) {\n                break;\n            }\n            const { match, baseToken } = this.setMatchToken(greedyMatch, lazyMatch);\n            if (match) {\n                const j = match.index + match[0].length - 1;\n                const baseGuesses = this.getBaseGuesses(baseToken, omniMatch);\n                matches.push(this.normalizeMatch(baseToken, j, match, baseGuesses));\n                lastIndex = j + 1;\n            }\n        }\n        const hasPromises = matches.some((match) => {\n            return match instanceof Promise;\n        });\n        if (hasPromises) {\n            return Promise.all(matches);\n        }\n        return matches;\n    }\n    // eslint-disable-next-line max-params\n    normalizeMatch(baseToken, j, match, baseGuesses) {\n        const baseMatch = {\n            pattern: 'repeat',\n            i: match.index,\n            j,\n            token: match[0],\n            baseToken,\n            baseGuesses: 0,\n            repeatCount: match[0].length / baseToken.length,\n        };\n        if (baseGuesses instanceof Promise) {\n            return baseGuesses.then((resolvedBaseGuesses) => {\n                return {\n                    ...baseMatch,\n                    baseGuesses: resolvedBaseGuesses,\n                };\n            });\n        }\n        return {\n            ...baseMatch,\n            baseGuesses,\n        };\n    }\n    getGreedyMatch(password, lastIndex) {\n        const greedy = /(.+)\\1+/g;\n        greedy.lastIndex = lastIndex;\n        return greedy.exec(password);\n    }\n    getLazyMatch(password, lastIndex) {\n        const lazy = /(.+?)\\1+/g;\n        lazy.lastIndex = lastIndex;\n        return lazy.exec(password);\n    }\n    setMatchToken(greedyMatch, lazyMatch) {\n        const lazyAnchored = /^(.+?)\\1+$/;\n        let match;\n        let baseToken = '';\n        if (lazyMatch && greedyMatch[0].length > lazyMatch[0].length) {\n            // greedy beats lazy for 'aabaab'\n            // greedy: [aabaab, aab]\n            // lazy:   [aa,     a]\n            match = greedyMatch;\n            // greedy's repeated string might itself be repeated, eg.\n            // aabaab in aabaabaabaab.\n            // run an anchored lazy match on greedy's repeated string\n            // to find the shortest repeated string\n            const temp = lazyAnchored.exec(match[0]);\n            if (temp) {\n                baseToken = temp[1];\n            }\n        }\n        else {\n            // lazy beats greedy for 'aaaaa'\n            // greedy: [aaaa,  aa]\n            // lazy:   [aaaaa, a]\n            match = lazyMatch;\n            if (match) {\n                baseToken = match[1];\n            }\n        }\n        return {\n            match,\n            baseToken,\n        };\n    }\n    getBaseGuesses(baseToken, omniMatch) {\n        const matches = omniMatch.match(baseToken);\n        if (matches instanceof Promise) {\n            return matches.then((resolvedMatches) => {\n                const baseAnalysis = scoring.mostGuessableMatchSequence(baseToken, resolvedMatches);\n                return baseAnalysis.guesses;\n            });\n        }\n        const baseAnalysis = scoring.mostGuessableMatchSequence(baseToken, matches);\n        return baseAnalysis.guesses;\n    }\n}\nexport default MatchRepeat;\n//# sourceMappingURL=matching.js.map"],"names":["MatchRepeat","match","password","omniMatch","matches","lastIndex","length","greedyMatch","getGreedyMatch","lazyMatch","getLazyMatch","baseToken","setMatchToken","j","index","baseGuesses","getBaseGuesses","push","normalizeMatch","hasPromises","some","Promise","all","baseMatch","pattern","i","token","repeatCount","then","resolvedBaseGuesses","greedy","exec","lazy","lazyAnchored","temp","resolvedMatches","baseAnalysis","scoring","mostGuessableMatchSequence","guesses"],"mappings":"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"}