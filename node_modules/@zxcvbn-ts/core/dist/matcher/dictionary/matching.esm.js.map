{"version":3,"file":"matching.esm.js","sources":["../../../src/matcher/dictionary/matching.ts"],"sourcesContent":["import findLevenshteinDistance from '../../levenshtein';\nimport { sorted } from '../../helper';\nimport { zxcvbnOptions } from '../../Options';\nimport Reverse from './variants/matching/reverse';\nimport L33t from './variants/matching/l33t';\nclass MatchDictionary {\n    constructor() {\n        this.l33t = new L33t(this.defaultMatch);\n        this.reverse = new Reverse(this.defaultMatch);\n    }\n    match({ password }) {\n        const matches = [\n            ...this.defaultMatch({\n                password,\n            }),\n            ...this.reverse.match({ password }),\n            ...this.l33t.match({ password }),\n        ];\n        return sorted(matches);\n    }\n    defaultMatch({ password, useLevenshtein = true }) {\n        const matches = [];\n        const passwordLength = password.length;\n        const passwordLower = password.toLowerCase();\n        // eslint-disable-next-line complexity,max-statements\n        Object.keys(zxcvbnOptions.rankedDictionaries).forEach((dictionaryName) => {\n            const rankedDict = zxcvbnOptions.rankedDictionaries[dictionaryName];\n            const longestDictionaryWordSize = zxcvbnOptions.rankedDictionariesMaxWordSize[dictionaryName];\n            const searchWidth = Math.min(longestDictionaryWordSize, passwordLength);\n            for (let i = 0; i < passwordLength; i += 1) {\n                const searchEnd = Math.min(i + searchWidth, passwordLength);\n                for (let j = i; j < searchEnd; j += 1) {\n                    const usedPassword = passwordLower.slice(i, +j + 1 || 9e9);\n                    const isInDictionary = usedPassword in rankedDict;\n                    let foundLevenshteinDistance = {};\n                    // only use levenshtein distance on full password to minimize the performance drop\n                    // and because otherwise there would be to many false positives\n                    const isFullPassword = i === 0 && j === passwordLength - 1;\n                    if (zxcvbnOptions.useLevenshteinDistance &&\n                        isFullPassword &&\n                        !isInDictionary &&\n                        useLevenshtein) {\n                        foundLevenshteinDistance = findLevenshteinDistance(usedPassword, rankedDict, zxcvbnOptions.levenshteinThreshold);\n                    }\n                    const isLevenshteinMatch = Object.keys(foundLevenshteinDistance).length !== 0;\n                    if (isInDictionary || isLevenshteinMatch) {\n                        const usedRankPassword = isLevenshteinMatch\n                            ? foundLevenshteinDistance.levenshteinDistanceEntry\n                            : usedPassword;\n                        const rank = rankedDict[usedRankPassword];\n                        matches.push({\n                            pattern: 'dictionary',\n                            i,\n                            j,\n                            token: password.slice(i, +j + 1 || 9e9),\n                            matchedWord: usedPassword,\n                            rank,\n                            dictionaryName: dictionaryName,\n                            reversed: false,\n                            l33t: false,\n                            ...foundLevenshteinDistance,\n                        });\n                    }\n                }\n            }\n        });\n        return matches;\n    }\n}\nexport default MatchDictionary;\n//# sourceMappingURL=matching.js.map"],"names":["MatchDictionary","constructor","l33t","L33t","defaultMatch","reverse","Reverse","match","password","matches","sorted","useLevenshtein","passwordLength","length","passwordLower","toLowerCase","Object","keys","zxcvbnOptions","rankedDictionaries","forEach","dictionaryName","rankedDict","longestDictionaryWordSize","rankedDictionariesMaxWordSize","searchWidth","Math","min","i","searchEnd","j","usedPassword","slice","isInDictionary","foundLevenshteinDistance","isFullPassword","useLevenshteinDistance","findLevenshteinDistance","levenshteinThreshold","isLevenshteinMatch","usedRankPassword","levenshteinDistanceEntry","rank","push","pattern","token","matchedWord","reversed"],"mappings":"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"}