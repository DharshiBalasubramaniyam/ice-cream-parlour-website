{"version":3,"file":"getCleanPasswords.esm.js","sources":["../../../../../../src/matcher/dictionary/variants/matching/unmunger/getCleanPasswords.ts"],"sourcesContent":["class CleanPasswords {\n    constructor({ substr, limit, trieRoot }) {\n        this.buffer = [];\n        this.finalPasswords = [];\n        this.substr = substr;\n        this.limit = limit;\n        this.trieRoot = trieRoot;\n    }\n    getAllPossibleSubsAtIndex(index) {\n        const nodes = [];\n        let cur = this.trieRoot;\n        for (let i = index; i < this.substr.length; i += 1) {\n            const character = this.substr.charAt(i);\n            cur = cur.getChild(character);\n            if (!cur) {\n                break;\n            }\n            nodes.push(cur);\n        }\n        return nodes;\n    }\n    // eslint-disable-next-line complexity,max-statements\n    helper({ onlyFullSub, isFullSub, index, subIndex, changes, lastSubLetter, consecutiveSubCount, }) {\n        if (this.finalPasswords.length >= this.limit) {\n            return;\n        }\n        if (index === this.substr.length) {\n            if (onlyFullSub === isFullSub) {\n                this.finalPasswords.push({ password: this.buffer.join(''), changes });\n            }\n            return;\n        }\n        // first, exhaust all possible substitutions at this index\n        const nodes = [...this.getAllPossibleSubsAtIndex(index)];\n        let hasSubs = false;\n        // iterate backward to get wider substitutions first\n        for (let i = index + nodes.length - 1; i >= index; i -= 1) {\n            const cur = nodes[i - index];\n            if (cur.isTerminal()) {\n                // Skip if this would be a 4th or more consecutive substitution of the same letter\n                // this should work in all language as there shouldn't be the same letter more than four times in a row\n                // So we can ignore the rest to save calculation time\n                if (lastSubLetter === cur.parents.join('') &&\n                    consecutiveSubCount >= 3) {\n                    // eslint-disable-next-line no-continue\n                    continue;\n                }\n                hasSubs = true;\n                const subs = cur.subs;\n                // eslint-disable-next-line no-restricted-syntax\n                for (const sub of subs) {\n                    this.buffer.push(sub);\n                    const newSubs = changes.concat({\n                        i: subIndex,\n                        letter: sub,\n                        substitution: cur.parents.join(''),\n                    });\n                    // recursively build the rest of the string\n                    this.helper({\n                        onlyFullSub,\n                        isFullSub,\n                        index: i + 1,\n                        subIndex: subIndex + sub.length,\n                        changes: newSubs,\n                        lastSubLetter: cur.parents.join(''),\n                        consecutiveSubCount: lastSubLetter === cur.parents.join('')\n                            ? consecutiveSubCount + 1\n                            : 1,\n                    });\n                    // backtrack by ignoring the added postfix\n                    this.buffer.pop();\n                    if (this.finalPasswords.length >= this.limit) {\n                        return;\n                    }\n                }\n            }\n        }\n        // next, generate all combos without doing a substitution at this index\n        // if a partial substitution is requested or there are no substitutions at this index\n        if (!onlyFullSub || !hasSubs) {\n            const firstChar = this.substr.charAt(index);\n            this.buffer.push(firstChar);\n            this.helper({\n                onlyFullSub,\n                isFullSub: isFullSub && !hasSubs,\n                index: index + 1,\n                subIndex: subIndex + 1,\n                changes,\n                lastSubLetter,\n                consecutiveSubCount,\n            });\n            this.buffer.pop();\n        }\n    }\n    getAll() {\n        // only full substitution\n        this.helper({\n            onlyFullSub: true,\n            isFullSub: true,\n            index: 0,\n            subIndex: 0,\n            changes: [],\n            lastSubLetter: undefined,\n            consecutiveSubCount: 0,\n        });\n        // only partial substitution\n        this.helper({\n            onlyFullSub: false,\n            isFullSub: true,\n            index: 0,\n            subIndex: 0,\n            changes: [],\n            lastSubLetter: undefined,\n            consecutiveSubCount: 0,\n        });\n        return this.finalPasswords;\n    }\n}\nconst getCleanPasswords = (password, limit, trieRoot) => {\n    const helper = new CleanPasswords({\n        substr: password,\n        limit,\n        trieRoot,\n    });\n    return helper.getAll();\n};\nexport default getCleanPasswords;\n//# sourceMappingURL=getCleanPasswords.js.map"],"names":["CleanPasswords","constructor","substr","limit","trieRoot","buffer","finalPasswords","getAllPossibleSubsAtIndex","index","nodes","cur","i","length","character","charAt","getChild","push","helper","onlyFullSub","isFullSub","subIndex","changes","lastSubLetter","consecutiveSubCount","password","join","hasSubs","isTerminal","parents","subs","sub","newSubs","concat","letter","substitution","pop","firstChar","getAll","undefined","getCleanPasswords"],"mappings":"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"}