{"version":3,"file":"l33t.js","sources":["../../../../../src/matcher/dictionary/variants/matching/l33t.ts"],"sourcesContent":["import { zxcvbnOptions } from '../../../../Options';\nimport getCleanPasswords from './unmunger/getCleanPasswords';\nconst getExtras = (passwordWithSubs, i, j) => {\n    const previousChanges = passwordWithSubs.changes.filter((changes) => {\n        return changes.i < i;\n    });\n    const iUnsubbed = previousChanges.reduce((value, change) => {\n        return value - change.letter.length + change.substitution.length;\n    }, i);\n    const usedChanges = passwordWithSubs.changes.filter((changes) => {\n        return changes.i >= i && changes.i <= j;\n    });\n    const jUnsubbed = usedChanges.reduce((value, change) => {\n        return value - change.letter.length + change.substitution.length;\n    }, j - i + iUnsubbed);\n    const filtered = [];\n    const subDisplay = [];\n    usedChanges.forEach((value) => {\n        const existingIndex = filtered.findIndex((t) => {\n            return t.letter === value.letter && t.substitution === value.substitution;\n        });\n        if (existingIndex < 0) {\n            filtered.push({\n                letter: value.letter,\n                substitution: value.substitution,\n            });\n            subDisplay.push(`${value.substitution} -> ${value.letter}`);\n        }\n    });\n    return {\n        i: iUnsubbed,\n        j: jUnsubbed,\n        subs: filtered,\n        subDisplay: subDisplay.join(', '),\n    };\n};\n/*\n * -------------------------------------------------------------------------------\n *  Dictionary l33t matching -----------------------------------------------------\n * -------------------------------------------------------------------------------\n */\nclass MatchL33t {\n    constructor(defaultMatch) {\n        this.defaultMatch = defaultMatch;\n    }\n    isAlreadyIncluded(matches, newMatch) {\n        return matches.some((l33tMatch) => {\n            return Object.entries(l33tMatch).every(([key, value]) => {\n                return key === 'subs' || value === newMatch[key];\n            });\n        });\n    }\n    match({ password }) {\n        const matches = [];\n        const subbedPasswords = getCleanPasswords(password, zxcvbnOptions.l33tMaxSubstitutions, zxcvbnOptions.trieNodeRoot);\n        let hasFullMatch = false;\n        let isFullSubstitution = true;\n        subbedPasswords.forEach((subbedPassword) => {\n            if (hasFullMatch) {\n                return;\n            }\n            const matchedDictionary = this.defaultMatch({\n                password: subbedPassword.password,\n                useLevenshtein: isFullSubstitution,\n            });\n            // only the first entry has a full substitution\n            isFullSubstitution = false;\n            matchedDictionary.forEach((match) => {\n                if (!hasFullMatch) {\n                    hasFullMatch = match.i === 0 && match.j === password.length - 1;\n                }\n                const extras = getExtras(subbedPassword, match.i, match.j);\n                const token = password.slice(extras.i, +extras.j + 1 || 9e9);\n                const newMatch = {\n                    ...match,\n                    l33t: true,\n                    token,\n                    ...extras,\n                };\n                const alreadyIncluded = this.isAlreadyIncluded(matches, newMatch);\n                // only return the matches that contain an actual substitution\n                if (token.toLowerCase() !== match.matchedWord && !alreadyIncluded) {\n                    matches.push(newMatch);\n                }\n            });\n        });\n        // filter single-character l33t matches to reduce noise.\n        // otherwise '1' matches 'i', '4' matches 'a', both very common English words\n        // with low dictionary rank.\n        return matches.filter((match) => match.token.length > 1);\n    }\n}\nexport default MatchL33t;\n//# sourceMappingURL=l33t.js.map"],"names":["getExtras","passwordWithSubs","i","j","previousChanges","changes","filter","iUnsubbed","reduce","value","change","letter","length","substitution","usedChanges","jUnsubbed","filtered","subDisplay","forEach","existingIndex","findIndex","t","push","subs","join","MatchL33t","constructor","defaultMatch","isAlreadyIncluded","matches","newMatch","some","l33tMatch","Object","entries","every","key","match","password","subbedPasswords","getCleanPasswords","zxcvbnOptions","l33tMaxSubstitutions","trieNodeRoot","hasFullMatch","isFullSubstitution","subbedPassword","matchedDictionary","useLevenshtein","extras","token","slice","l33t","alreadyIncluded","toLowerCase","matchedWord"],"mappings":"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"}