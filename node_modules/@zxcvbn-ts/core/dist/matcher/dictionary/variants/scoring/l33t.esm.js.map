{"version":3,"file":"l33t.esm.js","sources":["../../../../../src/matcher/dictionary/variants/scoring/l33t.ts"],"sourcesContent":["import utils from '../../../../scoring/utils';\nconst countSubstring = (string, substring) => {\n    let count = 0;\n    let pos = string.indexOf(substring);\n    while (pos >= 0) {\n        count += 1;\n        pos = string.indexOf(substring, pos + substring.length);\n    }\n    return count;\n};\nconst getCounts = ({ sub, token }) => {\n    // lower-case match.token before calculating: capitalization shouldn't affect l33t calc.\n    const tokenLower = token.toLowerCase();\n    // num of subbed chars\n    const subbedCount = countSubstring(tokenLower, sub.substitution);\n    // num of unsubbed chars\n    const unsubbedCount = countSubstring(tokenLower, sub.letter);\n    return {\n        subbedCount,\n        unsubbedCount,\n    };\n};\nexport default ({ l33t, subs, token }) => {\n    if (!l33t) {\n        return 1;\n    }\n    let variations = 1;\n    subs.forEach((sub) => {\n        const { subbedCount, unsubbedCount } = getCounts({ sub, token });\n        if (subbedCount === 0 || unsubbedCount === 0) {\n            // for this sub, password is either fully subbed (444) or fully unsubbed (aaa)\n            // treat that as doubling the space (attacker needs to try fully subbed chars in addition to\n            // unsubbed.)\n            variations *= 2;\n        }\n        else {\n            // this case is similar to capitalization:\n            // with aa44a, U = 3, S = 2, attacker needs to try unsubbed + one sub + two subs\n            const p = Math.min(unsubbedCount, subbedCount);\n            let possibilities = 0;\n            for (let i = 1; i <= p; i += 1) {\n                possibilities += utils.nCk(unsubbedCount + subbedCount, i);\n            }\n            variations *= possibilities;\n        }\n    });\n    return variations;\n};\n//# sourceMappingURL=l33t.js.map"],"names":["countSubstring","string","substring","count","pos","indexOf","length","getCounts","sub","token","tokenLower","toLowerCase","subbedCount","substitution","unsubbedCount","letter","l33t","subs","variations","forEach","p","Math","min","possibilities","i","utils","nCk"],"mappings":";;AACA,MAAMA,cAAc,GAAGA,CAACC,MAAM,EAAEC,SAAS,KAAK;EAC1C,IAAIC,KAAK,GAAG,CAAC,CAAA;AACb,EAAA,IAAIC,GAAG,GAAGH,MAAM,CAACI,OAAO,CAACH,SAAS,CAAC,CAAA;EACnC,OAAOE,GAAG,IAAI,CAAC,EAAE;AACbD,IAAAA,KAAK,IAAI,CAAC,CAAA;AACVC,IAAAA,GAAG,GAAGH,MAAM,CAACI,OAAO,CAACH,SAAS,EAAEE,GAAG,GAAGF,SAAS,CAACI,MAAM,CAAC,CAAA;AAC3D,GAAA;AACA,EAAA,OAAOH,KAAK,CAAA;AAChB,CAAC,CAAA;AACD,MAAMI,SAAS,GAAGA,CAAC;EAAEC,GAAG;AAAEC,EAAAA,KAAAA;AAAM,CAAC,KAAK;AAClC;AACA,EAAA,MAAMC,UAAU,GAAGD,KAAK,CAACE,WAAW,EAAE,CAAA;AACtC;EACA,MAAMC,WAAW,GAAGZ,cAAc,CAACU,UAAU,EAAEF,GAAG,CAACK,YAAY,CAAC,CAAA;AAChE;EACA,MAAMC,aAAa,GAAGd,cAAc,CAACU,UAAU,EAAEF,GAAG,CAACO,MAAM,CAAC,CAAA;EAC5D,OAAO;IACHH,WAAW;AACXE,IAAAA,aAAAA;GACH,CAAA;AACL,CAAC,CAAA;AACD,kBAAA,CAAe,CAAC;EAAEE,IAAI;EAAEC,IAAI;AAAER,EAAAA,KAAAA;AAAM,CAAC,KAAK;EACtC,IAAI,CAACO,IAAI,EAAE;AACP,IAAA,OAAO,CAAC,CAAA;AACZ,GAAA;EACA,IAAIE,UAAU,GAAG,CAAC,CAAA;AAClBD,EAAAA,IAAI,CAACE,OAAO,CAAEX,GAAG,IAAK;IAClB,MAAM;MAAEI,WAAW;AAAEE,MAAAA,aAAAA;KAAe,GAAGP,SAAS,CAAC;MAAEC,GAAG;AAAEC,MAAAA,KAAAA;AAAM,KAAC,CAAC,CAAA;AAChE,IAAA,IAAIG,WAAW,KAAK,CAAC,IAAIE,aAAa,KAAK,CAAC,EAAE;AAC1C;AACA;AACA;AACAI,MAAAA,UAAU,IAAI,CAAC,CAAA;AACnB,KAAC,MACI;AACD;AACA;MACA,MAAME,CAAC,GAAGC,IAAI,CAACC,GAAG,CAACR,aAAa,EAAEF,WAAW,CAAC,CAAA;MAC9C,IAAIW,aAAa,GAAG,CAAC,CAAA;AACrB,MAAA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIJ,CAAC,EAAEI,CAAC,IAAI,CAAC,EAAE;QAC5BD,aAAa,IAAIE,KAAK,CAACC,GAAG,CAACZ,aAAa,GAAGF,WAAW,EAAEY,CAAC,CAAC,CAAA;AAC9D,OAAA;AACAN,MAAAA,UAAU,IAAIK,aAAa,CAAA;AAC/B,KAAA;AACJ,GAAC,CAAC,CAAA;AACF,EAAA,OAAOL,UAAU,CAAA;AACrB,CAAC;;;;"}