{"version":3,"file":"uppercase.js","sources":["../../../../../src/matcher/dictionary/variants/scoring/uppercase.ts"],"sourcesContent":["import utils from '../../../../scoring/utils';\nimport { START_UPPER, END_UPPER, ALL_UPPER_INVERTED, ALL_LOWER_INVERTED, ONE_LOWER, ONE_UPPER, ALPHA_INVERTED, } from '../../../../data/const';\nconst getVariations = (cleanedWord) => {\n    const wordArray = cleanedWord.split('');\n    const upperCaseCount = wordArray.filter((char) => char.match(ONE_UPPER)).length;\n    const lowerCaseCount = wordArray.filter((char) => char.match(ONE_LOWER)).length;\n    let variations = 0;\n    const variationLength = Math.min(upperCaseCount, lowerCaseCount);\n    for (let i = 1; i <= variationLength; i += 1) {\n        variations += utils.nCk(upperCaseCount + lowerCaseCount, i);\n    }\n    return variations;\n};\nexport default (word) => {\n    // clean words of non alpha characters to remove the reward effekt to capitalize the first letter https://github.com/dropbox/zxcvbn/issues/232\n    const cleanedWord = word.replace(ALPHA_INVERTED, '');\n    if (cleanedWord.match(ALL_LOWER_INVERTED) ||\n        cleanedWord.toLowerCase() === cleanedWord) {\n        return 1;\n    }\n    // a capitalized word is the most common capitalization scheme,\n    // so it only doubles the search space (uncapitalized + capitalized).\n    // all caps and end-capitalized are common enough too, underestimate as 2x factor to be safe.\n    const commonCases = [START_UPPER, END_UPPER, ALL_UPPER_INVERTED];\n    const commonCasesLength = commonCases.length;\n    for (let i = 0; i < commonCasesLength; i += 1) {\n        const regex = commonCases[i];\n        if (cleanedWord.match(regex)) {\n            return 2;\n        }\n    }\n    // otherwise calculate the number of ways to capitalize U+L uppercase+lowercase letters\n    // with U uppercase letters or less. or, if there's more uppercase than lower (for eg. PASSwORD),\n    // the number of ways to lowercase U+L letters with L lowercase letters or less.\n    return getVariations(cleanedWord);\n};\n//# sourceMappingURL=uppercase.js.map"],"names":["getVariations","cleanedWord","wordArray","split","upperCaseCount","filter","char","match","ONE_UPPER","length","lowerCaseCount","ONE_LOWER","variations","variationLength","Math","min","i","utils","nCk","word","replace","ALPHA_INVERTED","ALL_LOWER_INVERTED","toLowerCase","commonCases","START_UPPER","END_UPPER","ALL_UPPER_INVERTED","commonCasesLength","regex"],"mappings":";;;;;AAEA,MAAMA,aAAa,GAAIC,WAAW,IAAK;AACnC,EAAA,MAAMC,SAAS,GAAGD,WAAW,CAACE,KAAK,CAAC,EAAE,CAAC,CAAA;AACvC,EAAA,MAAMC,cAAc,GAAGF,SAAS,CAACG,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,KAAK,CAACC,gBAAS,CAAC,CAAC,CAACC,MAAM,CAAA;AAC/E,EAAA,MAAMC,cAAc,GAAGR,SAAS,CAACG,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,KAAK,CAACI,gBAAS,CAAC,CAAC,CAACF,MAAM,CAAA;EAC/E,IAAIG,UAAU,GAAG,CAAC,CAAA;EAClB,MAAMC,eAAe,GAAGC,IAAI,CAACC,GAAG,CAACX,cAAc,EAAEM,cAAc,CAAC,CAAA;AAChE,EAAA,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIH,eAAe,EAAEG,CAAC,IAAI,CAAC,EAAE;IAC1CJ,UAAU,IAAIK,KAAK,CAACC,GAAG,CAACd,cAAc,GAAGM,cAAc,EAAEM,CAAC,CAAC,CAAA;AAC/D,GAAA;AACA,EAAA,OAAOJ,UAAU,CAAA;AACrB,CAAC,CAAA;AACD,uBAAA,CAAgBO,IAAI,IAAK;AACrB;EACA,MAAMlB,WAAW,GAAGkB,IAAI,CAACC,OAAO,CAACC,qBAAc,EAAE,EAAE,CAAC,CAAA;AACpD,EAAA,IAAIpB,WAAW,CAACM,KAAK,CAACe,yBAAkB,CAAC,IACrCrB,WAAW,CAACsB,WAAW,EAAE,KAAKtB,WAAW,EAAE;AAC3C,IAAA,OAAO,CAAC,CAAA;AACZ,GAAA;AACA;AACA;AACA;EACA,MAAMuB,WAAW,GAAG,CAACC,kBAAW,EAAEC,gBAAS,EAAEC,yBAAkB,CAAC,CAAA;AAChE,EAAA,MAAMC,iBAAiB,GAAGJ,WAAW,CAACf,MAAM,CAAA;AAC5C,EAAA,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGY,iBAAiB,EAAEZ,CAAC,IAAI,CAAC,EAAE;AAC3C,IAAA,MAAMa,KAAK,GAAGL,WAAW,CAACR,CAAC,CAAC,CAAA;AAC5B,IAAA,IAAIf,WAAW,CAACM,KAAK,CAACsB,KAAK,CAAC,EAAE;AAC1B,MAAA,OAAO,CAAC,CAAA;AACZ,KAAA;AACJ,GAAA;AACA;AACA;AACA;EACA,OAAO7B,aAAa,CAACC,WAAW,CAAC,CAAA;AACrC,CAAC;;;;"}