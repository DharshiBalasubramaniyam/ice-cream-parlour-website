{"version":3,"file":"scoring.js","sources":["../../../src/matcher/spatial/scoring.ts"],"sourcesContent":["import utils from '../../scoring/utils';\nimport { zxcvbnOptions } from '../../Options';\nconst calcAverageDegree = (graph) => {\n    let average = 0;\n    Object.keys(graph).forEach((key) => {\n        const neighbors = graph[key];\n        average += neighbors.filter((entry) => !!entry).length;\n    });\n    average /= Object.entries(graph).length;\n    return average;\n};\nconst estimatePossiblePatterns = ({ token, graph, turns, }) => {\n    const startingPosition = Object.keys(zxcvbnOptions.graphs[graph]).length;\n    const averageDegree = calcAverageDegree(zxcvbnOptions.graphs[graph]);\n    let guesses = 0;\n    const tokenLength = token.length;\n    // # estimate the number of possible patterns w/ tokenLength or less with turns or less.\n    for (let i = 2; i <= tokenLength; i += 1) {\n        const possibleTurns = Math.min(turns, i - 1);\n        for (let j = 1; j <= possibleTurns; j += 1) {\n            guesses += utils.nCk(i - 1, j - 1) * startingPosition * averageDegree ** j;\n        }\n    }\n    return guesses;\n};\nexport default ({ graph, token, shiftedCount, turns, }) => {\n    let guesses = estimatePossiblePatterns({ token, graph, turns });\n    // add extra guesses for shifted keys. (% instead of 5, A instead of a.)\n    // math is similar to extra guesses of l33t substitutions in dictionary matches.\n    if (shiftedCount) {\n        const unShiftedCount = token.length - shiftedCount;\n        if (shiftedCount === 0 || unShiftedCount === 0) {\n            guesses *= 2;\n        }\n        else {\n            let shiftedVariations = 0;\n            for (let i = 1; i <= Math.min(shiftedCount, unShiftedCount); i += 1) {\n                shiftedVariations += utils.nCk(shiftedCount + unShiftedCount, i);\n            }\n            guesses *= shiftedVariations;\n        }\n    }\n    return Math.round(guesses);\n};\n//# sourceMappingURL=scoring.js.map"],"names":["calcAverageDegree","graph","average","Object","keys","forEach","key","neighbors","filter","entry","length","entries","estimatePossiblePatterns","token","turns","startingPosition","zxcvbnOptions","graphs","averageDegree","guesses","tokenLength","i","possibleTurns","Math","min","j","utils","nCk","shiftedCount","unShiftedCount","shiftedVariations","round"],"mappings":";;;;;AAEA,MAAMA,iBAAiB,GAAIC,KAAK,IAAK;EACjC,IAAIC,OAAO,GAAG,CAAC,CAAA;EACfC,MAAM,CAACC,IAAI,CAACH,KAAK,CAAC,CAACI,OAAO,CAAEC,GAAG,IAAK;AAChC,IAAA,MAAMC,SAAS,GAAGN,KAAK,CAACK,GAAG,CAAC,CAAA;AAC5BJ,IAAAA,OAAO,IAAIK,SAAS,CAACC,MAAM,CAAEC,KAAK,IAAK,CAAC,CAACA,KAAK,CAAC,CAACC,MAAM,CAAA;AAC1D,GAAC,CAAC,CAAA;EACFR,OAAO,IAAIC,MAAM,CAACQ,OAAO,CAACV,KAAK,CAAC,CAACS,MAAM,CAAA;AACvC,EAAA,OAAOR,OAAO,CAAA;AAClB,CAAC,CAAA;AACD,MAAMU,wBAAwB,GAAGA,CAAC;EAAEC,KAAK;EAAEZ,KAAK;AAAEa,EAAAA,KAAAA;AAAO,CAAC,KAAK;AAC3D,EAAA,MAAMC,gBAAgB,GAAGZ,MAAM,CAACC,IAAI,CAACY,qBAAa,CAACC,MAAM,CAAChB,KAAK,CAAC,CAAC,CAACS,MAAM,CAAA;EACxE,MAAMQ,aAAa,GAAGlB,iBAAiB,CAACgB,qBAAa,CAACC,MAAM,CAAChB,KAAK,CAAC,CAAC,CAAA;EACpE,IAAIkB,OAAO,GAAG,CAAC,CAAA;AACf,EAAA,MAAMC,WAAW,GAAGP,KAAK,CAACH,MAAM,CAAA;AAChC;AACA,EAAA,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAID,WAAW,EAAEC,CAAC,IAAI,CAAC,EAAE;IACtC,MAAMC,aAAa,GAAGC,IAAI,CAACC,GAAG,CAACV,KAAK,EAAEO,CAAC,GAAG,CAAC,CAAC,CAAA;AAC5C,IAAA,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIH,aAAa,EAAEG,CAAC,IAAI,CAAC,EAAE;AACxCN,MAAAA,OAAO,IAAIO,KAAK,CAACC,GAAG,CAACN,CAAC,GAAG,CAAC,EAAEI,CAAC,GAAG,CAAC,CAAC,GAAGV,gBAAgB,GAAGG,aAAa,IAAIO,CAAC,CAAA;AAC9E,KAAA;AACJ,GAAA;AACA,EAAA,OAAON,OAAO,CAAA;AAClB,CAAC,CAAA;AACD,qBAAA,CAAe,CAAC;EAAElB,KAAK;EAAEY,KAAK;EAAEe,YAAY;AAAEd,EAAAA,KAAAA;AAAO,CAAC,KAAK;EACvD,IAAIK,OAAO,GAAGP,wBAAwB,CAAC;IAAEC,KAAK;IAAEZ,KAAK;AAAEa,IAAAA,KAAAA;AAAM,GAAC,CAAC,CAAA;AAC/D;AACA;AACA,EAAA,IAAIc,YAAY,EAAE;AACd,IAAA,MAAMC,cAAc,GAAGhB,KAAK,CAACH,MAAM,GAAGkB,YAAY,CAAA;AAClD,IAAA,IAAIA,YAAY,KAAK,CAAC,IAAIC,cAAc,KAAK,CAAC,EAAE;AAC5CV,MAAAA,OAAO,IAAI,CAAC,CAAA;AAChB,KAAC,MACI;MACD,IAAIW,iBAAiB,GAAG,CAAC,CAAA;AACzB,MAAA,KAAK,IAAIT,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIE,IAAI,CAACC,GAAG,CAACI,YAAY,EAAEC,cAAc,CAAC,EAAER,CAAC,IAAI,CAAC,EAAE;QACjES,iBAAiB,IAAIJ,KAAK,CAACC,GAAG,CAACC,YAAY,GAAGC,cAAc,EAAER,CAAC,CAAC,CAAA;AACpE,OAAA;AACAF,MAAAA,OAAO,IAAIW,iBAAiB,CAAA;AAChC,KAAA;AACJ,GAAA;AACA,EAAA,OAAOP,IAAI,CAACQ,KAAK,CAACZ,OAAO,CAAC,CAAA;AAC9B,CAAC;;;;"}