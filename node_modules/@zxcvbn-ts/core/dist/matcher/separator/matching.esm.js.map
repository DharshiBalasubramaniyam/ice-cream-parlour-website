{"version":3,"file":"matching.esm.js","sources":["../../../src/matcher/separator/matching.ts"],"sourcesContent":["import { SEPERATOR_CHARS } from '../../data/const';\nconst separatorRegex = new RegExp(`[${SEPERATOR_CHARS.join('')}]`);\n/*\n *-------------------------------------------------------------------------------\n * separators (any semi-repeated special character) -----------------------------\n *-------------------------------------------------------------------------------\n */\nclass MatchSeparator {\n    static getMostUsedSeparatorChar(password) {\n        const mostUsedSeperators = [\n            ...password\n                .split('')\n                .filter((c) => separatorRegex.test(c))\n                .reduce((memo, c) => {\n                const m = memo.get(c);\n                if (m) {\n                    memo.set(c, m + 1);\n                }\n                else {\n                    memo.set(c, 1);\n                }\n                return memo;\n            }, new Map())\n                .entries(),\n        ].sort(([_a, a], [_b, b]) => b - a);\n        if (!mostUsedSeperators.length)\n            return undefined;\n        const match = mostUsedSeperators[0];\n        // If the special character is only used once, don't treat it like a separator\n        if (match[1] < 2)\n            return undefined;\n        return match[0];\n    }\n    static getSeparatorRegex(separator) {\n        return new RegExp(`([^${separator}\\n])(${separator})(?!${separator})`, 'g');\n        // negative lookbehind can be added again in a few years when it is more supported by the browsers (currently 2023)\n        // https://github.com/zxcvbn-ts/zxcvbn/issues/202\n        // return new RegExp(`(?<!${separator})(${separator})(?!${separator})`, 'g')\n    }\n    // eslint-disable-next-line max-statements\n    match({ password }) {\n        const result = [];\n        if (password.length === 0)\n            return result;\n        const mostUsedSpecial = MatchSeparator.getMostUsedSeparatorChar(password);\n        if (mostUsedSpecial === undefined)\n            return result;\n        const isSeparator = MatchSeparator.getSeparatorRegex(mostUsedSpecial);\n        // eslint-disable-next-line no-restricted-syntax\n        for (const match of password.matchAll(isSeparator)) {\n            // eslint-disable-next-line no-continue\n            if (match.index === undefined)\n                continue;\n            // add one to the index because we changed the regex from negative lookbehind to something simple.\n            // this simple approach uses the first character before the separater too but we only need the index of the separater\n            // https://github.com/zxcvbn-ts/zxcvbn/issues/202\n            const i = match.index + 1;\n            result.push({\n                pattern: 'separator',\n                token: mostUsedSpecial,\n                i,\n                j: i,\n            });\n        }\n        return result;\n    }\n}\nexport default MatchSeparator;\n//# sourceMappingURL=matching.js.map"],"names":["separatorRegex","RegExp","SEPERATOR_CHARS","join","MatchSeparator","getMostUsedSeparatorChar","password","mostUsedSeperators","split","filter","c","test","reduce","memo","m","get","set","Map","entries","sort","_a","a","_b","b","length","undefined","match","getSeparatorRegex","separator","result","mostUsedSpecial","isSeparator","matchAll","index","i","push","pattern","token","j"],"mappings":";;AACA,MAAMA,cAAc,GAAG,IAAIC,MAAM,CAAE,CAAA,CAAA,EAAGC,eAAe,CAACC,IAAI,CAAC,EAAE,CAAE,GAAE,CAAC,CAAA;AAClE;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,CAAC;EACjB,OAAOC,wBAAwBA,CAACC,QAAQ,EAAE;AACtC,IAAA,MAAMC,kBAAkB,GAAG,CACvB,GAAGD,QAAQ,CACNE,KAAK,CAAC,EAAE,CAAC,CACTC,MAAM,CAAEC,CAAC,IAAKV,cAAc,CAACW,IAAI,CAACD,CAAC,CAAC,CAAC,CACrCE,MAAM,CAAC,CAACC,IAAI,EAAEH,CAAC,KAAK;AACrB,MAAA,MAAMI,CAAC,GAAGD,IAAI,CAACE,GAAG,CAACL,CAAC,CAAC,CAAA;AACrB,MAAA,IAAII,CAAC,EAAE;QACHD,IAAI,CAACG,GAAG,CAACN,CAAC,EAAEI,CAAC,GAAG,CAAC,CAAC,CAAA;AACtB,OAAC,MACI;AACDD,QAAAA,IAAI,CAACG,GAAG,CAACN,CAAC,EAAE,CAAC,CAAC,CAAA;AAClB,OAAA;AACA,MAAA,OAAOG,IAAI,CAAA;AACf,KAAC,EAAE,IAAII,GAAG,EAAE,CAAC,CACRC,OAAO,EAAE,CACjB,CAACC,IAAI,CAAC,CAAC,CAACC,EAAE,EAAEC,CAAC,CAAC,EAAE,CAACC,EAAE,EAAEC,CAAC,CAAC,KAAKA,CAAC,GAAGF,CAAC,CAAC,CAAA;AACnC,IAAA,IAAI,CAACd,kBAAkB,CAACiB,MAAM,EAC1B,OAAOC,SAAS,CAAA;AACpB,IAAA,MAAMC,KAAK,GAAGnB,kBAAkB,CAAC,CAAC,CAAC,CAAA;AACnC;IACA,IAAImB,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,EACZ,OAAOD,SAAS,CAAA;IACpB,OAAOC,KAAK,CAAC,CAAC,CAAC,CAAA;AACnB,GAAA;EACA,OAAOC,iBAAiBA,CAACC,SAAS,EAAE;AAChC,IAAA,OAAO,IAAI3B,MAAM,CAAE,CAAA,GAAA,EAAK2B,SAAU,CAAA,KAAA,EAAOA,SAAU,CAAA,IAAA,EAAMA,SAAU,CAAA,CAAA,CAAE,EAAE,GAAG,CAAC,CAAA;AAC3E;AACA;AACA;AACJ,GAAA;AACA;AACAF,EAAAA,KAAKA,CAAC;AAAEpB,IAAAA,QAAAA;AAAS,GAAC,EAAE;IAChB,MAAMuB,MAAM,GAAG,EAAE,CAAA;AACjB,IAAA,IAAIvB,QAAQ,CAACkB,MAAM,KAAK,CAAC,EACrB,OAAOK,MAAM,CAAA;AACjB,IAAA,MAAMC,eAAe,GAAG1B,cAAc,CAACC,wBAAwB,CAACC,QAAQ,CAAC,CAAA;AACzE,IAAA,IAAIwB,eAAe,KAAKL,SAAS,EAC7B,OAAOI,MAAM,CAAA;AACjB,IAAA,MAAME,WAAW,GAAG3B,cAAc,CAACuB,iBAAiB,CAACG,eAAe,CAAC,CAAA;AACrE;IACA,KAAK,MAAMJ,KAAK,IAAIpB,QAAQ,CAAC0B,QAAQ,CAACD,WAAW,CAAC,EAAE;AAChD;AACA,MAAA,IAAIL,KAAK,CAACO,KAAK,KAAKR,SAAS,EACzB,SAAA;AACJ;AACA;AACA;AACA,MAAA,MAAMS,CAAC,GAAGR,KAAK,CAACO,KAAK,GAAG,CAAC,CAAA;MACzBJ,MAAM,CAACM,IAAI,CAAC;AACRC,QAAAA,OAAO,EAAE,WAAW;AACpBC,QAAAA,KAAK,EAAEP,eAAe;QACtBI,CAAC;AACDI,QAAAA,CAAC,EAAEJ,CAAAA;AACP,OAAC,CAAC,CAAA;AACN,KAAA;AACA,IAAA,OAAOL,MAAM,CAAA;AACjB,GAAA;AACJ;;;;"}