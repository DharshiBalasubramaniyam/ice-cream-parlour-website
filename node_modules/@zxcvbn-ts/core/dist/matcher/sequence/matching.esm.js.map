{"version":3,"file":"matching.esm.js","sources":["../../../src/matcher/sequence/matching.ts"],"sourcesContent":["import { ALL_UPPER, ALL_LOWER, ALL_DIGIT } from '../../data/const';\n/*\n *-------------------------------------------------------------------------------\n * sequences (abcdef) ------------------------------\n *-------------------------------------------------------------------------------\n */\nclass MatchSequence {\n    constructor() {\n        this.MAX_DELTA = 5;\n    }\n    // eslint-disable-next-line max-statements\n    match({ password }) {\n        /*\n         * Identifies sequences by looking for repeated differences in unicode codepoint.\n         * this allows skipping, such as 9753, and also matches some extended unicode sequences\n         * such as Greek and Cyrillic alphabets.\n         *\n         * for example, consider the input 'abcdb975zy'\n         *\n         * password: a   b   c   d   b    9   7   5   z   y\n         * index:    0   1   2   3   4    5   6   7   8   9\n         * delta:      1   1   1  -2  -41  -2  -2  69   1\n         *\n         * expected result:\n         * [(i, j, delta), ...] = [(0, 3, 1), (5, 7, -2), (8, 9, 1)]\n         */\n        const result = [];\n        if (password.length === 1) {\n            return [];\n        }\n        let i = 0;\n        let lastDelta = null;\n        const passwordLength = password.length;\n        for (let k = 1; k < passwordLength; k += 1) {\n            const delta = password.charCodeAt(k) - password.charCodeAt(k - 1);\n            if (lastDelta == null) {\n                lastDelta = delta;\n            }\n            if (delta !== lastDelta) {\n                const j = k - 1;\n                this.update({\n                    i,\n                    j,\n                    delta: lastDelta,\n                    password,\n                    result,\n                });\n                i = j;\n                lastDelta = delta;\n            }\n        }\n        this.update({\n            i,\n            j: passwordLength - 1,\n            delta: lastDelta,\n            password,\n            result,\n        });\n        return result;\n    }\n    update({ i, j, delta, password, result }) {\n        if (j - i > 1 || Math.abs(delta) === 1) {\n            const absoluteDelta = Math.abs(delta);\n            if (absoluteDelta > 0 && absoluteDelta <= this.MAX_DELTA) {\n                const token = password.slice(i, +j + 1 || 9e9);\n                const { sequenceName, sequenceSpace } = this.getSequence(token);\n                return result.push({\n                    pattern: 'sequence',\n                    i,\n                    j,\n                    token: password.slice(i, +j + 1 || 9e9),\n                    sequenceName,\n                    sequenceSpace,\n                    ascending: delta > 0,\n                });\n            }\n        }\n        return null;\n    }\n    getSequence(token) {\n        // TODO conservatively stick with roman alphabet size.\n        //  (this could be improved)\n        let sequenceName = 'unicode';\n        let sequenceSpace = 26;\n        if (ALL_LOWER.test(token)) {\n            sequenceName = 'lower';\n            sequenceSpace = 26;\n        }\n        else if (ALL_UPPER.test(token)) {\n            sequenceName = 'upper';\n            sequenceSpace = 26;\n        }\n        else if (ALL_DIGIT.test(token)) {\n            sequenceName = 'digits';\n            sequenceSpace = 10;\n        }\n        return {\n            sequenceName,\n            sequenceSpace,\n        };\n    }\n}\nexport default MatchSequence;\n//# sourceMappingURL=matching.js.map"],"names":["MatchSequence","constructor","MAX_DELTA","match","password","result","length","i","lastDelta","passwordLength","k","delta","charCodeAt","j","update","Math","abs","absoluteDelta","token","slice","sequenceName","sequenceSpace","getSequence","push","pattern","ascending","ALL_LOWER","test","ALL_UPPER","ALL_DIGIT"],"mappings":"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"}