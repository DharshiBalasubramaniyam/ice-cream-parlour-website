{"version":3,"file":"TimeEstimates.js","sources":["../src/TimeEstimates.ts"],"sourcesContent":["import { zxcvbnOptions } from './Options';\nconst SECOND = 1;\nconst MINUTE = SECOND * 60;\nconst HOUR = MINUTE * 60;\nconst DAY = HOUR * 24;\nconst MONTH = DAY * 31;\nconst YEAR = MONTH * 12;\nconst CENTURY = YEAR * 100;\nconst times = {\n    second: SECOND,\n    minute: MINUTE,\n    hour: HOUR,\n    day: DAY,\n    month: MONTH,\n    year: YEAR,\n    century: CENTURY,\n};\n/*\n * -------------------------------------------------------------------------------\n *  Estimates time for an attacker ---------------------------------------------------------------\n * -------------------------------------------------------------------------------\n */\nclass TimeEstimates {\n    translate(displayStr, value) {\n        let key = displayStr;\n        if (value !== undefined && value !== 1) {\n            key += 's';\n        }\n        const { timeEstimation } = zxcvbnOptions.translations;\n        return timeEstimation[key].replace('{base}', `${value}`);\n    }\n    estimateAttackTimes(guesses) {\n        const crackTimesSeconds = {\n            onlineThrottling100PerHour: guesses / (100 / 3600),\n            onlineNoThrottling10PerSecond: guesses / 10,\n            offlineSlowHashing1e4PerSecond: guesses / 1e4,\n            offlineFastHashing1e10PerSecond: guesses / 1e10,\n        };\n        const crackTimesDisplay = {\n            onlineThrottling100PerHour: '',\n            onlineNoThrottling10PerSecond: '',\n            offlineSlowHashing1e4PerSecond: '',\n            offlineFastHashing1e10PerSecond: '',\n        };\n        Object.keys(crackTimesSeconds).forEach((scenario) => {\n            const seconds = crackTimesSeconds[scenario];\n            crackTimesDisplay[scenario] =\n                this.displayTime(seconds);\n        });\n        return {\n            crackTimesSeconds,\n            crackTimesDisplay,\n            score: this.guessesToScore(guesses),\n        };\n    }\n    guessesToScore(guesses) {\n        const DELTA = 5;\n        if (guesses < 1e3 + DELTA) {\n            // risky password: \"too guessable\"\n            return 0;\n        }\n        if (guesses < 1e6 + DELTA) {\n            // modest protection from throttled online attacks: \"very guessable\"\n            return 1;\n        }\n        if (guesses < 1e8 + DELTA) {\n            // modest protection from unthrottled online attacks: \"somewhat guessable\"\n            return 2;\n        }\n        if (guesses < 1e10 + DELTA) {\n            // modest protection from offline attacks: \"safely unguessable\"\n            // assuming a salted, slow hash function like bcrypt, scrypt, PBKDF2, argon, etc\n            return 3;\n        }\n        // strong protection from offline attacks under same scenario: \"very unguessable\"\n        return 4;\n    }\n    displayTime(seconds) {\n        let displayStr = 'centuries';\n        let base;\n        const timeKeys = Object.keys(times);\n        const foundIndex = timeKeys.findIndex((time) => seconds < times[time]);\n        if (foundIndex > -1) {\n            displayStr = timeKeys[foundIndex - 1];\n            if (foundIndex !== 0) {\n                base = Math.round(seconds / times[displayStr]);\n            }\n            else {\n                displayStr = 'ltSecond';\n            }\n        }\n        return this.translate(displayStr, base);\n    }\n}\nexport default TimeEstimates;\n//# sourceMappingURL=TimeEstimates.js.map"],"names":["SECOND","MINUTE","HOUR","DAY","MONTH","YEAR","CENTURY","times","second","minute","hour","day","month","year","century","TimeEstimates","translate","displayStr","value","key","undefined","timeEstimation","zxcvbnOptions","translations","replace","estimateAttackTimes","guesses","crackTimesSeconds","onlineThrottling100PerHour","onlineNoThrottling10PerSecond","offlineSlowHashing1e4PerSecond","offlineFastHashing1e10PerSecond","crackTimesDisplay","Object","keys","forEach","scenario","seconds","displayTime","score","guessesToScore","DELTA","base","timeKeys","foundIndex","findIndex","time","Math","round"],"mappings":"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"}