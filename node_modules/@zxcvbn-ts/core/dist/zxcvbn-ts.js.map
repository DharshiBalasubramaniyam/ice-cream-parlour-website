{"version":3,"file":"zxcvbn-ts.js","sources":["../src/helper.ts","../src/data/dateSplits.ts","../src/data/const.ts","../src/matcher/date/matching.ts","../../../../node_modules/fastest-levenshtein/esm/mod.js","../src/levenshtein.ts","../src/data/l33tTable.ts","../src/data/translationKeys.ts","../src/matcher/dictionary/variants/matching/unmunger/TrieNode.ts","../src/matcher/dictionary/variants/matching/unmunger/l33tTableToTrieNode.ts","../src/Options.ts","../src/matcher/dictionary/variants/matching/reverse.ts","../src/matcher/dictionary/variants/matching/unmunger/getCleanPasswords.ts","../src/matcher/dictionary/variants/matching/l33t.ts","../src/matcher/dictionary/matching.ts","../src/matcher/regex/matching.ts","../src/scoring/utils.ts","../src/matcher/bruteforce/scoring.ts","../src/matcher/date/scoring.ts","../src/matcher/dictionary/variants/scoring/uppercase.ts","../src/matcher/dictionary/variants/scoring/l33t.ts","../src/matcher/dictionary/scoring.ts","../src/matcher/regex/scoring.ts","../src/matcher/repeat/scoring.ts","../src/matcher/sequence/scoring.ts","../src/matcher/spatial/scoring.ts","../src/matcher/separator/scoring.ts","../src/scoring/estimate.ts","../src/scoring/index.ts","../src/matcher/repeat/matching.ts","../src/matcher/sequence/matching.ts","../src/matcher/spatial/matching.ts","../src/matcher/separator/matching.ts","../src/Matching.ts","../src/TimeEstimates.ts","../src/matcher/bruteforce/feedback.ts","../src/matcher/date/feedback.ts","../src/matcher/dictionary/feedback.ts","../src/matcher/regex/feedback.ts","../src/matcher/repeat/feedback.ts","../src/matcher/sequence/feedback.ts","../src/matcher/spatial/feedback.ts","../src/matcher/separator/feedback.ts","../src/Feedback.ts","../src/debounce.ts","../src/index.ts"],"sourcesContent":["export const empty = (obj) => Object.keys(obj).length === 0;\nexport const extend = (listToExtend, list) => \n// eslint-disable-next-line prefer-spread\nlistToExtend.push.apply(listToExtend, list);\nexport const translate = (string, chrMap) => {\n    let newString = string;\n    Object.entries(chrMap).forEach(([key, value]) => {\n        const escapedKey = key.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n        const regex = new RegExp(escapedKey, 'g');\n        newString = newString.replace(regex, value);\n    });\n    return newString;\n};\n// mod implementation that works for negative numbers\nexport const mod = (n, m) => ((n % m) + m) % m;\n// sort on i primary, j secondary\nexport const sorted = (matches) => matches.sort((m1, m2) => m1.i - m2.i || m1.j - m2.j);\nexport const buildRankedDictionary = (orderedList) => {\n    const result = {};\n    let counter = 1; // rank starts at 1, not 0\n    orderedList.forEach((word) => {\n        result[word] = counter;\n        counter += 1;\n    });\n    return result;\n};\n//# sourceMappingURL=helper.js.map","export default {\n    4: [\n        // for length-4 strings, eg 1191 or 9111, two ways to split:\n        [1, 2],\n        [2, 3], // 91 1 1\n    ],\n    5: [\n        [1, 3],\n        [2, 3],\n        //  [2, 3], // 91 1 11    <- duplicate previous one\n        [2, 4], // 91 11 1    <- New and must be added as bug fix\n    ],\n    6: [\n        [1, 2],\n        [2, 4],\n        [4, 5], // 1991 1 1\n    ],\n    //  1111991\n    7: [\n        [1, 3],\n        [2, 3],\n        [4, 5],\n        [4, 6], // 1991 11 1\n    ],\n    8: [\n        [2, 4],\n        [4, 6], // 1991 11 11\n    ],\n};\n//# sourceMappingURL=dateSplits.js.map","import dateSplits from './dateSplits';\nexport const DATE_MAX_YEAR = 2050;\nexport const DATE_MIN_YEAR = 1000;\nexport const DATE_SPLITS = dateSplits;\nexport const BRUTEFORCE_CARDINALITY = 10;\nexport const MIN_GUESSES_BEFORE_GROWING_SEQUENCE = 10000;\nexport const MIN_SUBMATCH_GUESSES_SINGLE_CHAR = 10;\nexport const MIN_SUBMATCH_GUESSES_MULTI_CHAR = 50;\nexport const MIN_YEAR_SPACE = 20;\n// \\xbf-\\xdf is a range for almost all special uppercase letter like Ä and so on\nexport const START_UPPER = /^[A-Z\\xbf-\\xdf][^A-Z\\xbf-\\xdf]+$/;\nexport const END_UPPER = /^[^A-Z\\xbf-\\xdf]+[A-Z\\xbf-\\xdf]$/;\n// \\xdf-\\xff is a range for almost all special lowercase letter like ä and so on\nexport const ALL_UPPER = /^[A-Z\\xbf-\\xdf]+$/;\nexport const ALL_UPPER_INVERTED = /^[^a-z\\xdf-\\xff]+$/;\nexport const ALL_LOWER = /^[a-z\\xdf-\\xff]+$/;\nexport const ALL_LOWER_INVERTED = /^[^A-Z\\xbf-\\xdf]+$/;\nexport const ONE_LOWER = /[a-z\\xdf-\\xff]/;\nexport const ONE_UPPER = /[A-Z\\xbf-\\xdf]/;\nexport const ALPHA_INVERTED = /[^A-Za-z\\xbf-\\xdf]/gi;\nexport const ALL_DIGIT = /^\\d+$/;\nexport const REFERENCE_YEAR = new Date().getFullYear();\nexport const REGEXEN = { recentYear: /19\\d\\d|200\\d|201\\d|202\\d/g };\n/* Separators */\nexport const SEPERATOR_CHARS = [\n    ' ',\n    ',',\n    ';',\n    ':',\n    '|',\n    '/',\n    '\\\\',\n    '_',\n    '.',\n    '-',\n];\nexport const SEPERATOR_CHAR_COUNT = SEPERATOR_CHARS.length;\n//# sourceMappingURL=const.js.map","import { DATE_MAX_YEAR, DATE_MIN_YEAR, DATE_SPLITS, REFERENCE_YEAR, } from '../../data/const';\nimport { sorted } from '../../helper';\n/*\n * -------------------------------------------------------------------------------\n *  date matching ----------------------------------------------------------------\n * -------------------------------------------------------------------------------\n */\nclass MatchDate {\n    /*\n     * a \"date\" is recognized as:\n     *   any 3-tuple that starts or ends with a 2- or 4-digit year,\n     *   with 2 or 0 separator chars (1.1.91 or 1191),\n     *   maybe zero-padded (01-01-91 vs 1-1-91),\n     *   a month between 1 and 12,\n     *   a day between 1 and 31.\n     *\n     * note: this isn't true date parsing in that \"feb 31st\" is allowed,\n     * this doesn't check for leap years, etc.\n     *\n     * recipe:\n     * start with regex to find maybe-dates, then attempt to map the integers\n     * onto month-day-year to filter the maybe-dates into dates.\n     * finally, remove matches that are substrings of other matches to reduce noise.\n     *\n     * note: instead of using a lazy or greedy regex to find many dates over the full string,\n     * this uses a ^...$ regex against every substring of the password -- less performant but leads\n     * to every possible date match.\n     */\n    match({ password }) {\n        const matches = [\n            ...this.getMatchesWithoutSeparator(password),\n            ...this.getMatchesWithSeparator(password),\n        ];\n        const filteredMatches = this.filterNoise(matches);\n        return sorted(filteredMatches);\n    }\n    getMatchesWithSeparator(password) {\n        const matches = [];\n        const maybeDateWithSeparator = /^(\\d{1,4})([\\s/\\\\_.-])(\\d{1,2})\\2(\\d{1,4})$/;\n        // # dates with separators are between length 6 '1/1/91' and 10 '11/11/1991'\n        for (let i = 0; i <= Math.abs(password.length - 6); i += 1) {\n            for (let j = i + 5; j <= i + 9; j += 1) {\n                if (j >= password.length) {\n                    break;\n                }\n                const token = password.slice(i, +j + 1 || 9e9);\n                const regexMatch = maybeDateWithSeparator.exec(token);\n                if (regexMatch != null) {\n                    const dmy = this.mapIntegersToDayMonthYear([\n                        parseInt(regexMatch[1], 10),\n                        parseInt(regexMatch[3], 10),\n                        parseInt(regexMatch[4], 10),\n                    ]);\n                    if (dmy != null) {\n                        matches.push({\n                            pattern: 'date',\n                            token,\n                            i,\n                            j,\n                            separator: regexMatch[2],\n                            year: dmy.year,\n                            month: dmy.month,\n                            day: dmy.day,\n                        });\n                    }\n                }\n            }\n        }\n        return matches;\n    }\n    // eslint-disable-next-line max-statements\n    getMatchesWithoutSeparator(password) {\n        const matches = [];\n        const maybeDateNoSeparator = /^\\d{4,8}$/;\n        const metric = (candidate) => Math.abs(candidate.year - REFERENCE_YEAR);\n        // # dates without separators are between length 4 '1191' and 8 '11111991'\n        for (let i = 0; i <= Math.abs(password.length - 4); i += 1) {\n            for (let j = i + 3; j <= i + 7; j += 1) {\n                if (j >= password.length) {\n                    break;\n                }\n                const token = password.slice(i, +j + 1 || 9e9);\n                if (maybeDateNoSeparator.exec(token)) {\n                    const candidates = [];\n                    const index = token.length;\n                    const splittedDates = DATE_SPLITS[index];\n                    splittedDates.forEach(([k, l]) => {\n                        const dmy = this.mapIntegersToDayMonthYear([\n                            parseInt(token.slice(0, k), 10),\n                            parseInt(token.slice(k, l), 10),\n                            parseInt(token.slice(l), 10),\n                        ]);\n                        if (dmy != null) {\n                            candidates.push(dmy);\n                        }\n                    });\n                    if (candidates.length > 0) {\n                        /*\n                         * at this point: different possible dmy mappings for the same i,j substring.\n                         * match the candidate date that likely takes the fewest guesses: a year closest\n                         * to 2000.\n                         * (scoring.REFERENCE_YEAR).\n                         *\n                         * ie, considering '111504', prefer 11-15-04 to 1-1-1504\n                         * (interpreting '04' as 2004)\n                         */\n                        let bestCandidate = candidates[0];\n                        let minDistance = metric(candidates[0]);\n                        candidates.slice(1).forEach((candidate) => {\n                            const distance = metric(candidate);\n                            if (distance < minDistance) {\n                                bestCandidate = candidate;\n                                minDistance = distance;\n                            }\n                        });\n                        matches.push({\n                            pattern: 'date',\n                            token,\n                            i,\n                            j,\n                            separator: '',\n                            year: bestCandidate.year,\n                            month: bestCandidate.month,\n                            day: bestCandidate.day,\n                        });\n                    }\n                }\n            }\n        }\n        return matches;\n    }\n    /*\n     * matches now contains all valid date strings in a way that is tricky to capture\n     * with regexes only. while thorough, it will contain some unintuitive noise:\n     *\n     * '2015_06_04', in addition to matching 2015_06_04, will also contain\n     * 5(!) other date matches: 15_06_04, 5_06_04, ..., even 2015 (matched as 5/1/2020)\n     *\n     * to reduce noise, remove date matches that are strict substrings of others\n     */\n    filterNoise(matches) {\n        return matches.filter((match) => {\n            let isSubmatch = false;\n            const matchesLength = matches.length;\n            for (let o = 0; o < matchesLength; o += 1) {\n                const otherMatch = matches[o];\n                if (match !== otherMatch) {\n                    if (otherMatch.i <= match.i && otherMatch.j >= match.j) {\n                        isSubmatch = true;\n                        break;\n                    }\n                }\n            }\n            return !isSubmatch;\n        });\n    }\n    /*\n     * given a 3-tuple, discard if:\n     *   middle int is over 31 (for all dmy formats, years are never allowed in the middle)\n     *   middle int is zero\n     *   any int is over the max allowable year\n     *   any int is over two digits but under the min allowable year\n     *   2 integers are over 31, the max allowable day\n     *   2 integers are zero\n     *   all integers are over 12, the max allowable month\n     */\n    // eslint-disable-next-line complexity, max-statements\n    mapIntegersToDayMonthYear(integers) {\n        if (integers[1] > 31 || integers[1] <= 0) {\n            return null;\n        }\n        let over12 = 0;\n        let over31 = 0;\n        let under1 = 0;\n        for (let o = 0, len1 = integers.length; o < len1; o += 1) {\n            const int = integers[o];\n            if ((int > 99 && int < DATE_MIN_YEAR) || int > DATE_MAX_YEAR) {\n                return null;\n            }\n            if (int > 31) {\n                over31 += 1;\n            }\n            if (int > 12) {\n                over12 += 1;\n            }\n            if (int <= 0) {\n                under1 += 1;\n            }\n        }\n        if (over31 >= 2 || over12 === 3 || under1 >= 2) {\n            return null;\n        }\n        return this.getDayMonth(integers);\n    }\n    // eslint-disable-next-line max-statements\n    getDayMonth(integers) {\n        // first look for a four digit year: yyyy + daymonth or daymonth + yyyy\n        const possibleYearSplits = [\n            [integers[2], integers.slice(0, 2)],\n            [integers[0], integers.slice(1, 3)], // year first\n        ];\n        const possibleYearSplitsLength = possibleYearSplits.length;\n        for (let j = 0; j < possibleYearSplitsLength; j += 1) {\n            const [y, rest] = possibleYearSplits[j];\n            if (DATE_MIN_YEAR <= y && y <= DATE_MAX_YEAR) {\n                const dm = this.mapIntegersToDayMonth(rest);\n                if (dm != null) {\n                    return {\n                        year: y,\n                        month: dm.month,\n                        day: dm.day,\n                    };\n                }\n                /*\n                 * for a candidate that includes a four-digit year,\n                 * when the remaining integers don't match to a day and month,\n                 * it is not a date.\n                 */\n                return null;\n            }\n        }\n        // given no four-digit year, two digit years are the most flexible int to match, so\n        // try to parse a day-month out of integers[0..1] or integers[1..0]\n        for (let k = 0; k < possibleYearSplitsLength; k += 1) {\n            const [y, rest] = possibleYearSplits[k];\n            const dm = this.mapIntegersToDayMonth(rest);\n            if (dm != null) {\n                return {\n                    year: this.twoToFourDigitYear(y),\n                    month: dm.month,\n                    day: dm.day,\n                };\n            }\n        }\n        return null;\n    }\n    mapIntegersToDayMonth(integers) {\n        const temp = [integers, integers.slice().reverse()];\n        for (let i = 0; i < temp.length; i += 1) {\n            const data = temp[i];\n            const day = data[0];\n            const month = data[1];\n            if (day >= 1 && day <= 31 && month >= 1 && month <= 12) {\n                return {\n                    day,\n                    month,\n                };\n            }\n        }\n        return null;\n    }\n    twoToFourDigitYear(year) {\n        if (year > 99) {\n            return year;\n        }\n        if (year > 50) {\n            // 87 -> 1987\n            return year + 1900;\n        }\n        // 15 -> 2015\n        return year + 2000;\n    }\n}\nexport default MatchDate;\n//# sourceMappingURL=matching.js.map","const peq = new Uint32Array(0x10000);\nconst myers_32 = (a, b) => {\n    const n = a.length;\n    const m = b.length;\n    const lst = 1 << (n - 1);\n    let pv = -1;\n    let mv = 0;\n    let sc = n;\n    let i = n;\n    while (i--) {\n        peq[a.charCodeAt(i)] |= 1 << i;\n    }\n    for (i = 0; i < m; i++) {\n        let eq = peq[b.charCodeAt(i)];\n        const xv = eq | mv;\n        eq |= ((eq & pv) + pv) ^ pv;\n        mv |= ~(eq | pv);\n        pv &= eq;\n        if (mv & lst) {\n            sc++;\n        }\n        if (pv & lst) {\n            sc--;\n        }\n        mv = (mv << 1) | 1;\n        pv = (pv << 1) | ~(xv | mv);\n        mv &= xv;\n    }\n    i = n;\n    while (i--) {\n        peq[a.charCodeAt(i)] = 0;\n    }\n    return sc;\n};\nconst myers_x = (b, a) => {\n    const n = a.length;\n    const m = b.length;\n    const mhc = [];\n    const phc = [];\n    const hsize = Math.ceil(n / 32);\n    const vsize = Math.ceil(m / 32);\n    for (let i = 0; i < hsize; i++) {\n        phc[i] = -1;\n        mhc[i] = 0;\n    }\n    let j = 0;\n    for (; j < vsize - 1; j++) {\n        let mv = 0;\n        let pv = -1;\n        const start = j * 32;\n        const vlen = Math.min(32, m) + start;\n        for (let k = start; k < vlen; k++) {\n            peq[b.charCodeAt(k)] |= 1 << k;\n        }\n        for (let i = 0; i < n; i++) {\n            const eq = peq[a.charCodeAt(i)];\n            const pb = (phc[(i / 32) | 0] >>> i) & 1;\n            const mb = (mhc[(i / 32) | 0] >>> i) & 1;\n            const xv = eq | mv;\n            const xh = ((((eq | mb) & pv) + pv) ^ pv) | eq | mb;\n            let ph = mv | ~(xh | pv);\n            let mh = pv & xh;\n            if ((ph >>> 31) ^ pb) {\n                phc[(i / 32) | 0] ^= 1 << i;\n            }\n            if ((mh >>> 31) ^ mb) {\n                mhc[(i / 32) | 0] ^= 1 << i;\n            }\n            ph = (ph << 1) | pb;\n            mh = (mh << 1) | mb;\n            pv = mh | ~(xv | ph);\n            mv = ph & xv;\n        }\n        for (let k = start; k < vlen; k++) {\n            peq[b.charCodeAt(k)] = 0;\n        }\n    }\n    let mv = 0;\n    let pv = -1;\n    const start = j * 32;\n    const vlen = Math.min(32, m - start) + start;\n    for (let k = start; k < vlen; k++) {\n        peq[b.charCodeAt(k)] |= 1 << k;\n    }\n    let score = m;\n    for (let i = 0; i < n; i++) {\n        const eq = peq[a.charCodeAt(i)];\n        const pb = (phc[(i / 32) | 0] >>> i) & 1;\n        const mb = (mhc[(i / 32) | 0] >>> i) & 1;\n        const xv = eq | mv;\n        const xh = ((((eq | mb) & pv) + pv) ^ pv) | eq | mb;\n        let ph = mv | ~(xh | pv);\n        let mh = pv & xh;\n        score += (ph >>> (m - 1)) & 1;\n        score -= (mh >>> (m - 1)) & 1;\n        if ((ph >>> 31) ^ pb) {\n            phc[(i / 32) | 0] ^= 1 << i;\n        }\n        if ((mh >>> 31) ^ mb) {\n            mhc[(i / 32) | 0] ^= 1 << i;\n        }\n        ph = (ph << 1) | pb;\n        mh = (mh << 1) | mb;\n        pv = mh | ~(xv | ph);\n        mv = ph & xv;\n    }\n    for (let k = start; k < vlen; k++) {\n        peq[b.charCodeAt(k)] = 0;\n    }\n    return score;\n};\nconst distance = (a, b) => {\n    if (a.length < b.length) {\n        const tmp = b;\n        b = a;\n        a = tmp;\n    }\n    if (b.length === 0) {\n        return a.length;\n    }\n    if (a.length <= 32) {\n        return myers_32(a, b);\n    }\n    return myers_x(a, b);\n};\nconst closest = (str, arr) => {\n    let min_distance = Infinity;\n    let min_index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        const dist = distance(str, arr[i]);\n        if (dist < min_distance) {\n            min_distance = dist;\n            min_index = i;\n        }\n    }\n    return arr[min_index];\n};\nexport { closest, distance };\n","import { distance } from 'fastest-levenshtein';\nconst getUsedThreshold = (password, entry, threshold) => {\n    const isPasswordToShort = password.length <= entry.length;\n    const isThresholdLongerThanPassword = password.length <= threshold;\n    const shouldUsePasswordLength = isPasswordToShort || isThresholdLongerThanPassword;\n    // if password is too small use the password length divided by 4 while the threshold needs to be at least 1\n    return shouldUsePasswordLength ? Math.ceil(password.length / 4) : threshold;\n};\nconst findLevenshteinDistance = (password, rankedDictionary, threshold) => {\n    let foundDistance = 0;\n    const found = Object.keys(rankedDictionary).find((entry) => {\n        const usedThreshold = getUsedThreshold(password, entry, threshold);\n        if (Math.abs(password.length - entry.length) > usedThreshold) {\n            return false;\n        }\n        const foundEntryDistance = distance(password, entry);\n        const isInThreshold = foundEntryDistance <= usedThreshold;\n        if (isInThreshold) {\n            foundDistance = foundEntryDistance;\n        }\n        return isInThreshold;\n    });\n    if (found) {\n        return {\n            levenshteinDistance: foundDistance,\n            levenshteinDistanceEntry: found,\n        };\n    }\n    return {};\n};\nexport default findLevenshteinDistance;\n//# sourceMappingURL=levenshtein.js.map","export default {\n    a: ['4', '@'],\n    b: ['8'],\n    c: ['(', '{', '[', '<'],\n    d: ['6', '|)'],\n    e: ['3'],\n    f: ['#'],\n    g: ['6', '9', '&'],\n    h: ['#', '|-|'],\n    i: ['1', '!', '|'],\n    k: ['<', '|<'],\n    l: ['!', '1', '|', '7'],\n    m: ['^^', 'nn', '2n', '/\\\\\\\\/\\\\\\\\'],\n    n: ['//'],\n    o: ['0', '()'],\n    q: ['9'],\n    u: ['|_|'],\n    s: ['$', '5'],\n    t: ['+', '7'],\n    v: ['<', '>', '/'],\n    w: ['^/', 'uu', 'vv', '2u', '2v', '\\\\\\\\/\\\\\\\\/'],\n    x: ['%', '><'],\n    z: ['2'],\n};\n//# sourceMappingURL=l33tTable.js.map","export default {\n    warnings: {\n        straightRow: 'straightRow',\n        keyPattern: 'keyPattern',\n        simpleRepeat: 'simpleRepeat',\n        extendedRepeat: 'extendedRepeat',\n        sequences: 'sequences',\n        recentYears: 'recentYears',\n        dates: 'dates',\n        topTen: 'topTen',\n        topHundred: 'topHundred',\n        common: 'common',\n        similarToCommon: 'similarToCommon',\n        wordByItself: 'wordByItself',\n        namesByThemselves: 'namesByThemselves',\n        commonNames: 'commonNames',\n        userInputs: 'userInputs',\n        pwned: 'pwned',\n    },\n    suggestions: {\n        l33t: 'l33t',\n        reverseWords: 'reverseWords',\n        allUppercase: 'allUppercase',\n        capitalization: 'capitalization',\n        dates: 'dates',\n        recentYears: 'recentYears',\n        associatedYears: 'associatedYears',\n        sequences: 'sequences',\n        repeated: 'repeated',\n        longerKeyboardPattern: 'longerKeyboardPattern',\n        anotherWord: 'anotherWord',\n        useWords: 'useWords',\n        noNeed: 'noNeed',\n        pwned: 'pwned',\n    },\n    timeEstimation: {\n        ltSecond: 'ltSecond',\n        second: 'second',\n        seconds: 'seconds',\n        minute: 'minute',\n        minutes: 'minutes',\n        hour: 'hour',\n        hours: 'hours',\n        day: 'day',\n        days: 'days',\n        month: 'month',\n        months: 'months',\n        year: 'year',\n        years: 'years',\n        centuries: 'centuries',\n    },\n};\n//# sourceMappingURL=translationKeys.js.map","export default class TrieNode {\n    constructor(parents = []) {\n        this.parents = parents;\n        // eslint-disable-next-line no-use-before-define\n        this.children = new Map();\n    }\n    addSub(key, ...subs) {\n        const firstChar = key.charAt(0);\n        if (!this.children.has(firstChar)) {\n            this.children.set(firstChar, new TrieNode([...this.parents, firstChar]));\n        }\n        let cur = this.children.get(firstChar);\n        for (let i = 1; i < key.length; i += 1) {\n            const c = key.charAt(i);\n            if (!cur.hasChild(c)) {\n                cur.addChild(c);\n            }\n            cur = cur.getChild(c);\n        }\n        cur.subs = (cur.subs || []).concat(subs);\n        return this;\n    }\n    getChild(child) {\n        return this.children.get(child);\n    }\n    isTerminal() {\n        return !!this.subs;\n    }\n    addChild(child) {\n        if (!this.hasChild(child)) {\n            this.children.set(child, new TrieNode([...this.parents, child]));\n        }\n    }\n    hasChild(child) {\n        return this.children.has(child);\n    }\n}\n//# sourceMappingURL=TrieNode.js.map","export default (l33tTable, triNode) => {\n    Object.entries(l33tTable).forEach(([letter, substitutions]) => {\n        substitutions.forEach((substitution) => {\n            triNode.addSub(substitution, letter);\n        });\n    });\n    return triNode;\n};\n//# sourceMappingURL=l33tTableToTrieNode.js.map","import { buildRankedDictionary } from './helper';\nimport l33tTable from './data/l33tTable';\nimport translationKeys from './data/translationKeys';\nimport TrieNode from './matcher/dictionary/variants/matching/unmunger/TrieNode';\nimport l33tTableToTrieNode from './matcher/dictionary/variants/matching/unmunger/l33tTableToTrieNode';\nexport class Options {\n    constructor() {\n        this.matchers = {};\n        this.l33tTable = l33tTable;\n        this.trieNodeRoot = l33tTableToTrieNode(l33tTable, new TrieNode());\n        this.dictionary = {\n            userInputs: [],\n        };\n        this.rankedDictionaries = {};\n        this.rankedDictionariesMaxWordSize = {};\n        this.translations = translationKeys;\n        this.graphs = {};\n        this.useLevenshteinDistance = false;\n        this.levenshteinThreshold = 2;\n        this.l33tMaxSubstitutions = 100;\n        this.maxLength = 256;\n        this.setRankedDictionaries();\n    }\n    // eslint-disable-next-line max-statements,complexity\n    setOptions(options = {}) {\n        if (options.l33tTable) {\n            this.l33tTable = options.l33tTable;\n            this.trieNodeRoot = l33tTableToTrieNode(options.l33tTable, new TrieNode());\n        }\n        if (options.dictionary) {\n            this.dictionary = options.dictionary;\n            this.setRankedDictionaries();\n        }\n        if (options.translations) {\n            this.setTranslations(options.translations);\n        }\n        if (options.graphs) {\n            this.graphs = options.graphs;\n        }\n        if (options.useLevenshteinDistance !== undefined) {\n            this.useLevenshteinDistance = options.useLevenshteinDistance;\n        }\n        if (options.levenshteinThreshold !== undefined) {\n            this.levenshteinThreshold = options.levenshteinThreshold;\n        }\n        if (options.l33tMaxSubstitutions !== undefined) {\n            this.l33tMaxSubstitutions = options.l33tMaxSubstitutions;\n        }\n        if (options.maxLength !== undefined) {\n            this.maxLength = options.maxLength;\n        }\n    }\n    setTranslations(translations) {\n        if (this.checkCustomTranslations(translations)) {\n            this.translations = translations;\n        }\n        else {\n            throw new Error('Invalid translations object fallback to keys');\n        }\n    }\n    checkCustomTranslations(translations) {\n        let valid = true;\n        Object.keys(translationKeys).forEach((type) => {\n            if (type in translations) {\n                const translationType = type;\n                Object.keys(translationKeys[translationType]).forEach((key) => {\n                    if (!(key in translations[translationType])) {\n                        valid = false;\n                    }\n                });\n            }\n            else {\n                valid = false;\n            }\n        });\n        return valid;\n    }\n    setRankedDictionaries() {\n        const rankedDictionaries = {};\n        const rankedDictionariesMaxWorkSize = {};\n        Object.keys(this.dictionary).forEach((name) => {\n            rankedDictionaries[name] = buildRankedDictionary(this.dictionary[name]);\n            rankedDictionariesMaxWorkSize[name] =\n                this.getRankedDictionariesMaxWordSize(this.dictionary[name]);\n        });\n        this.rankedDictionaries = rankedDictionaries;\n        this.rankedDictionariesMaxWordSize = rankedDictionariesMaxWorkSize;\n    }\n    getRankedDictionariesMaxWordSize(list) {\n        const data = list.map((el) => {\n            if (typeof el !== 'string') {\n                return el.toString().length;\n            }\n            return el.length;\n        });\n        // do not use Math.max(...data) because it can result in max stack size error because every entry will be used as an argument\n        if (data.length === 0) {\n            return 0;\n        }\n        return data.reduce((a, b) => Math.max(a, b), -Infinity);\n    }\n    buildSanitizedRankedDictionary(list) {\n        const sanitizedInputs = [];\n        list.forEach((input) => {\n            const inputType = typeof input;\n            if (inputType === 'string' ||\n                inputType === 'number' ||\n                inputType === 'boolean') {\n                sanitizedInputs.push(input.toString().toLowerCase());\n            }\n        });\n        return buildRankedDictionary(sanitizedInputs);\n    }\n    extendUserInputsDictionary(dictionary) {\n        if (!this.dictionary.userInputs) {\n            this.dictionary.userInputs = [];\n        }\n        const newList = [...this.dictionary.userInputs, ...dictionary];\n        this.rankedDictionaries.userInputs =\n            this.buildSanitizedRankedDictionary(newList);\n        this.rankedDictionariesMaxWordSize.userInputs =\n            this.getRankedDictionariesMaxWordSize(newList);\n    }\n    addMatcher(name, matcher) {\n        if (this.matchers[name]) {\n            console.info(`Matcher ${name} already exists`);\n        }\n        else {\n            this.matchers[name] = matcher;\n        }\n    }\n}\nexport const zxcvbnOptions = new Options();\n//# sourceMappingURL=Options.js.map","/*\n * -------------------------------------------------------------------------------\n *  Dictionary reverse matching --------------------------------------------------\n * -------------------------------------------------------------------------------\n */\nclass MatchReverse {\n    constructor(defaultMatch) {\n        this.defaultMatch = defaultMatch;\n    }\n    match({ password }) {\n        const passwordReversed = password.split('').reverse().join('');\n        return this.defaultMatch({\n            password: passwordReversed,\n        }).map((match) => ({\n            ...match,\n            token: match.token.split('').reverse().join(''),\n            reversed: true,\n            // map coordinates back to original string\n            i: password.length - 1 - match.j,\n            j: password.length - 1 - match.i,\n        }));\n    }\n}\nexport default MatchReverse;\n//# sourceMappingURL=reverse.js.map","class CleanPasswords {\n    constructor({ substr, limit, trieRoot }) {\n        this.buffer = [];\n        this.finalPasswords = [];\n        this.substr = substr;\n        this.limit = limit;\n        this.trieRoot = trieRoot;\n    }\n    getAllPossibleSubsAtIndex(index) {\n        const nodes = [];\n        let cur = this.trieRoot;\n        for (let i = index; i < this.substr.length; i += 1) {\n            const character = this.substr.charAt(i);\n            cur = cur.getChild(character);\n            if (!cur) {\n                break;\n            }\n            nodes.push(cur);\n        }\n        return nodes;\n    }\n    // eslint-disable-next-line complexity,max-statements\n    helper({ onlyFullSub, isFullSub, index, subIndex, changes, lastSubLetter, consecutiveSubCount, }) {\n        if (this.finalPasswords.length >= this.limit) {\n            return;\n        }\n        if (index === this.substr.length) {\n            if (onlyFullSub === isFullSub) {\n                this.finalPasswords.push({ password: this.buffer.join(''), changes });\n            }\n            return;\n        }\n        // first, exhaust all possible substitutions at this index\n        const nodes = [...this.getAllPossibleSubsAtIndex(index)];\n        let hasSubs = false;\n        // iterate backward to get wider substitutions first\n        for (let i = index + nodes.length - 1; i >= index; i -= 1) {\n            const cur = nodes[i - index];\n            if (cur.isTerminal()) {\n                // Skip if this would be a 4th or more consecutive substitution of the same letter\n                // this should work in all language as there shouldn't be the same letter more than four times in a row\n                // So we can ignore the rest to save calculation time\n                if (lastSubLetter === cur.parents.join('') &&\n                    consecutiveSubCount >= 3) {\n                    // eslint-disable-next-line no-continue\n                    continue;\n                }\n                hasSubs = true;\n                const subs = cur.subs;\n                // eslint-disable-next-line no-restricted-syntax\n                for (const sub of subs) {\n                    this.buffer.push(sub);\n                    const newSubs = changes.concat({\n                        i: subIndex,\n                        letter: sub,\n                        substitution: cur.parents.join(''),\n                    });\n                    // recursively build the rest of the string\n                    this.helper({\n                        onlyFullSub,\n                        isFullSub,\n                        index: i + 1,\n                        subIndex: subIndex + sub.length,\n                        changes: newSubs,\n                        lastSubLetter: cur.parents.join(''),\n                        consecutiveSubCount: lastSubLetter === cur.parents.join('')\n                            ? consecutiveSubCount + 1\n                            : 1,\n                    });\n                    // backtrack by ignoring the added postfix\n                    this.buffer.pop();\n                    if (this.finalPasswords.length >= this.limit) {\n                        return;\n                    }\n                }\n            }\n        }\n        // next, generate all combos without doing a substitution at this index\n        // if a partial substitution is requested or there are no substitutions at this index\n        if (!onlyFullSub || !hasSubs) {\n            const firstChar = this.substr.charAt(index);\n            this.buffer.push(firstChar);\n            this.helper({\n                onlyFullSub,\n                isFullSub: isFullSub && !hasSubs,\n                index: index + 1,\n                subIndex: subIndex + 1,\n                changes,\n                lastSubLetter,\n                consecutiveSubCount,\n            });\n            this.buffer.pop();\n        }\n    }\n    getAll() {\n        // only full substitution\n        this.helper({\n            onlyFullSub: true,\n            isFullSub: true,\n            index: 0,\n            subIndex: 0,\n            changes: [],\n            lastSubLetter: undefined,\n            consecutiveSubCount: 0,\n        });\n        // only partial substitution\n        this.helper({\n            onlyFullSub: false,\n            isFullSub: true,\n            index: 0,\n            subIndex: 0,\n            changes: [],\n            lastSubLetter: undefined,\n            consecutiveSubCount: 0,\n        });\n        return this.finalPasswords;\n    }\n}\nconst getCleanPasswords = (password, limit, trieRoot) => {\n    const helper = new CleanPasswords({\n        substr: password,\n        limit,\n        trieRoot,\n    });\n    return helper.getAll();\n};\nexport default getCleanPasswords;\n//# sourceMappingURL=getCleanPasswords.js.map","import { zxcvbnOptions } from '../../../../Options';\nimport getCleanPasswords from './unmunger/getCleanPasswords';\nconst getExtras = (passwordWithSubs, i, j) => {\n    const previousChanges = passwordWithSubs.changes.filter((changes) => {\n        return changes.i < i;\n    });\n    const iUnsubbed = previousChanges.reduce((value, change) => {\n        return value - change.letter.length + change.substitution.length;\n    }, i);\n    const usedChanges = passwordWithSubs.changes.filter((changes) => {\n        return changes.i >= i && changes.i <= j;\n    });\n    const jUnsubbed = usedChanges.reduce((value, change) => {\n        return value - change.letter.length + change.substitution.length;\n    }, j - i + iUnsubbed);\n    const filtered = [];\n    const subDisplay = [];\n    usedChanges.forEach((value) => {\n        const existingIndex = filtered.findIndex((t) => {\n            return t.letter === value.letter && t.substitution === value.substitution;\n        });\n        if (existingIndex < 0) {\n            filtered.push({\n                letter: value.letter,\n                substitution: value.substitution,\n            });\n            subDisplay.push(`${value.substitution} -> ${value.letter}`);\n        }\n    });\n    return {\n        i: iUnsubbed,\n        j: jUnsubbed,\n        subs: filtered,\n        subDisplay: subDisplay.join(', '),\n    };\n};\n/*\n * -------------------------------------------------------------------------------\n *  Dictionary l33t matching -----------------------------------------------------\n * -------------------------------------------------------------------------------\n */\nclass MatchL33t {\n    constructor(defaultMatch) {\n        this.defaultMatch = defaultMatch;\n    }\n    isAlreadyIncluded(matches, newMatch) {\n        return matches.some((l33tMatch) => {\n            return Object.entries(l33tMatch).every(([key, value]) => {\n                return key === 'subs' || value === newMatch[key];\n            });\n        });\n    }\n    match({ password }) {\n        const matches = [];\n        const subbedPasswords = getCleanPasswords(password, zxcvbnOptions.l33tMaxSubstitutions, zxcvbnOptions.trieNodeRoot);\n        let hasFullMatch = false;\n        let isFullSubstitution = true;\n        subbedPasswords.forEach((subbedPassword) => {\n            if (hasFullMatch) {\n                return;\n            }\n            const matchedDictionary = this.defaultMatch({\n                password: subbedPassword.password,\n                useLevenshtein: isFullSubstitution,\n            });\n            // only the first entry has a full substitution\n            isFullSubstitution = false;\n            matchedDictionary.forEach((match) => {\n                if (!hasFullMatch) {\n                    hasFullMatch = match.i === 0 && match.j === password.length - 1;\n                }\n                const extras = getExtras(subbedPassword, match.i, match.j);\n                const token = password.slice(extras.i, +extras.j + 1 || 9e9);\n                const newMatch = {\n                    ...match,\n                    l33t: true,\n                    token,\n                    ...extras,\n                };\n                const alreadyIncluded = this.isAlreadyIncluded(matches, newMatch);\n                // only return the matches that contain an actual substitution\n                if (token.toLowerCase() !== match.matchedWord && !alreadyIncluded) {\n                    matches.push(newMatch);\n                }\n            });\n        });\n        // filter single-character l33t matches to reduce noise.\n        // otherwise '1' matches 'i', '4' matches 'a', both very common English words\n        // with low dictionary rank.\n        return matches.filter((match) => match.token.length > 1);\n    }\n}\nexport default MatchL33t;\n//# sourceMappingURL=l33t.js.map","import findLevenshteinDistance from '../../levenshtein';\nimport { sorted } from '../../helper';\nimport { zxcvbnOptions } from '../../Options';\nimport Reverse from './variants/matching/reverse';\nimport L33t from './variants/matching/l33t';\nclass MatchDictionary {\n    constructor() {\n        this.l33t = new L33t(this.defaultMatch);\n        this.reverse = new Reverse(this.defaultMatch);\n    }\n    match({ password }) {\n        const matches = [\n            ...this.defaultMatch({\n                password,\n            }),\n            ...this.reverse.match({ password }),\n            ...this.l33t.match({ password }),\n        ];\n        return sorted(matches);\n    }\n    defaultMatch({ password, useLevenshtein = true }) {\n        const matches = [];\n        const passwordLength = password.length;\n        const passwordLower = password.toLowerCase();\n        // eslint-disable-next-line complexity,max-statements\n        Object.keys(zxcvbnOptions.rankedDictionaries).forEach((dictionaryName) => {\n            const rankedDict = zxcvbnOptions.rankedDictionaries[dictionaryName];\n            const longestDictionaryWordSize = zxcvbnOptions.rankedDictionariesMaxWordSize[dictionaryName];\n            const searchWidth = Math.min(longestDictionaryWordSize, passwordLength);\n            for (let i = 0; i < passwordLength; i += 1) {\n                const searchEnd = Math.min(i + searchWidth, passwordLength);\n                for (let j = i; j < searchEnd; j += 1) {\n                    const usedPassword = passwordLower.slice(i, +j + 1 || 9e9);\n                    const isInDictionary = usedPassword in rankedDict;\n                    let foundLevenshteinDistance = {};\n                    // only use levenshtein distance on full password to minimize the performance drop\n                    // and because otherwise there would be to many false positives\n                    const isFullPassword = i === 0 && j === passwordLength - 1;\n                    if (zxcvbnOptions.useLevenshteinDistance &&\n                        isFullPassword &&\n                        !isInDictionary &&\n                        useLevenshtein) {\n                        foundLevenshteinDistance = findLevenshteinDistance(usedPassword, rankedDict, zxcvbnOptions.levenshteinThreshold);\n                    }\n                    const isLevenshteinMatch = Object.keys(foundLevenshteinDistance).length !== 0;\n                    if (isInDictionary || isLevenshteinMatch) {\n                        const usedRankPassword = isLevenshteinMatch\n                            ? foundLevenshteinDistance.levenshteinDistanceEntry\n                            : usedPassword;\n                        const rank = rankedDict[usedRankPassword];\n                        matches.push({\n                            pattern: 'dictionary',\n                            i,\n                            j,\n                            token: password.slice(i, +j + 1 || 9e9),\n                            matchedWord: usedPassword,\n                            rank,\n                            dictionaryName: dictionaryName,\n                            reversed: false,\n                            l33t: false,\n                            ...foundLevenshteinDistance,\n                        });\n                    }\n                }\n            }\n        });\n        return matches;\n    }\n}\nexport default MatchDictionary;\n//# sourceMappingURL=matching.js.map","import { REGEXEN } from '../../data/const';\nimport { sorted } from '../../helper';\n/*\n * -------------------------------------------------------------------------------\n *  regex matching ---------------------------------------------------------------\n * -------------------------------------------------------------------------------\n */\nclass MatchRegex {\n    match({ password, regexes = REGEXEN }) {\n        const matches = [];\n        Object.keys(regexes).forEach((name) => {\n            const regex = regexes[name];\n            regex.lastIndex = 0; // keeps regexMatch stateless\n            let regexMatch;\n            // eslint-disable-next-line no-cond-assign\n            while ((regexMatch = regex.exec(password))) {\n                if (regexMatch) {\n                    const token = regexMatch[0];\n                    matches.push({\n                        pattern: 'regex',\n                        token,\n                        i: regexMatch.index,\n                        j: regexMatch.index + regexMatch[0].length - 1,\n                        regexName: name,\n                        regexMatch,\n                    });\n                }\n            }\n        });\n        return sorted(matches);\n    }\n}\nexport default MatchRegex;\n//# sourceMappingURL=matching.js.map","export default {\n    // binomial coefficients\n    // src: http://blog.plover.com/math/choose.html\n    nCk(n, k) {\n        let count = n;\n        if (k > count) {\n            return 0;\n        }\n        if (k === 0) {\n            return 1;\n        }\n        let coEff = 1;\n        for (let i = 1; i <= k; i += 1) {\n            coEff *= count;\n            coEff /= i;\n            count -= 1;\n        }\n        return coEff;\n    },\n    log10(n) {\n        if (n === 0)\n            return 0;\n        return Math.log(n) / Math.log(10); // IE doesn't support Math.log10 :(\n    },\n    log2(n) {\n        return Math.log(n) / Math.log(2);\n    },\n    factorial(num) {\n        let rval = 1;\n        for (let i = 2; i <= num; i += 1)\n            rval *= i;\n        return rval;\n    },\n};\n//# sourceMappingURL=utils.js.map","import { BRUTEFORCE_CARDINALITY, MIN_SUBMATCH_GUESSES_SINGLE_CHAR, MIN_SUBMATCH_GUESSES_MULTI_CHAR, } from '../../data/const';\nexport default ({ token }) => {\n    let guesses = BRUTEFORCE_CARDINALITY ** token.length;\n    if (guesses === Number.POSITIVE_INFINITY) {\n        guesses = Number.MAX_VALUE;\n    }\n    let minGuesses;\n    // small detail: make bruteforce matches at minimum one guess bigger than smallest allowed\n    // submatch guesses, such that non-bruteforce submatches over the same [i..j] take precedence.\n    if (token.length === 1) {\n        minGuesses = MIN_SUBMATCH_GUESSES_SINGLE_CHAR + 1;\n    }\n    else {\n        minGuesses = MIN_SUBMATCH_GUESSES_MULTI_CHAR + 1;\n    }\n    return Math.max(guesses, minGuesses);\n};\n//# sourceMappingURL=scoring.js.map","import { MIN_YEAR_SPACE, REFERENCE_YEAR } from '../../data/const';\nexport default ({ year, separator }) => {\n    // base guesses: (year distance from REFERENCE_YEAR) * num_days * num_years\n    const yearSpace = Math.max(Math.abs(year - REFERENCE_YEAR), MIN_YEAR_SPACE);\n    let guesses = yearSpace * 365;\n    // add factor of 4 for separator selection (one of ~4 choices)\n    if (separator) {\n        guesses *= 4;\n    }\n    return guesses;\n};\n//# sourceMappingURL=scoring.js.map","import utils from '../../../../scoring/utils';\nimport { START_UPPER, END_UPPER, ALL_UPPER_INVERTED, ALL_LOWER_INVERTED, ONE_LOWER, ONE_UPPER, ALPHA_INVERTED, } from '../../../../data/const';\nconst getVariations = (cleanedWord) => {\n    const wordArray = cleanedWord.split('');\n    const upperCaseCount = wordArray.filter((char) => char.match(ONE_UPPER)).length;\n    const lowerCaseCount = wordArray.filter((char) => char.match(ONE_LOWER)).length;\n    let variations = 0;\n    const variationLength = Math.min(upperCaseCount, lowerCaseCount);\n    for (let i = 1; i <= variationLength; i += 1) {\n        variations += utils.nCk(upperCaseCount + lowerCaseCount, i);\n    }\n    return variations;\n};\nexport default (word) => {\n    // clean words of non alpha characters to remove the reward effekt to capitalize the first letter https://github.com/dropbox/zxcvbn/issues/232\n    const cleanedWord = word.replace(ALPHA_INVERTED, '');\n    if (cleanedWord.match(ALL_LOWER_INVERTED) ||\n        cleanedWord.toLowerCase() === cleanedWord) {\n        return 1;\n    }\n    // a capitalized word is the most common capitalization scheme,\n    // so it only doubles the search space (uncapitalized + capitalized).\n    // all caps and end-capitalized are common enough too, underestimate as 2x factor to be safe.\n    const commonCases = [START_UPPER, END_UPPER, ALL_UPPER_INVERTED];\n    const commonCasesLength = commonCases.length;\n    for (let i = 0; i < commonCasesLength; i += 1) {\n        const regex = commonCases[i];\n        if (cleanedWord.match(regex)) {\n            return 2;\n        }\n    }\n    // otherwise calculate the number of ways to capitalize U+L uppercase+lowercase letters\n    // with U uppercase letters or less. or, if there's more uppercase than lower (for eg. PASSwORD),\n    // the number of ways to lowercase U+L letters with L lowercase letters or less.\n    return getVariations(cleanedWord);\n};\n//# sourceMappingURL=uppercase.js.map","import utils from '../../../../scoring/utils';\nconst countSubstring = (string, substring) => {\n    let count = 0;\n    let pos = string.indexOf(substring);\n    while (pos >= 0) {\n        count += 1;\n        pos = string.indexOf(substring, pos + substring.length);\n    }\n    return count;\n};\nconst getCounts = ({ sub, token }) => {\n    // lower-case match.token before calculating: capitalization shouldn't affect l33t calc.\n    const tokenLower = token.toLowerCase();\n    // num of subbed chars\n    const subbedCount = countSubstring(tokenLower, sub.substitution);\n    // num of unsubbed chars\n    const unsubbedCount = countSubstring(tokenLower, sub.letter);\n    return {\n        subbedCount,\n        unsubbedCount,\n    };\n};\nexport default ({ l33t, subs, token }) => {\n    if (!l33t) {\n        return 1;\n    }\n    let variations = 1;\n    subs.forEach((sub) => {\n        const { subbedCount, unsubbedCount } = getCounts({ sub, token });\n        if (subbedCount === 0 || unsubbedCount === 0) {\n            // for this sub, password is either fully subbed (444) or fully unsubbed (aaa)\n            // treat that as doubling the space (attacker needs to try fully subbed chars in addition to\n            // unsubbed.)\n            variations *= 2;\n        }\n        else {\n            // this case is similar to capitalization:\n            // with aa44a, U = 3, S = 2, attacker needs to try unsubbed + one sub + two subs\n            const p = Math.min(unsubbedCount, subbedCount);\n            let possibilities = 0;\n            for (let i = 1; i <= p; i += 1) {\n                possibilities += utils.nCk(unsubbedCount + subbedCount, i);\n            }\n            variations *= possibilities;\n        }\n    });\n    return variations;\n};\n//# sourceMappingURL=l33t.js.map","import uppercaseVariant from './variants/scoring/uppercase';\nimport l33tVariant from './variants/scoring/l33t';\nexport default ({ rank, reversed, l33t, subs, token, dictionaryName, }) => {\n    const baseGuesses = rank; // keep these as properties for display purposes\n    const uppercaseVariations = uppercaseVariant(token);\n    const l33tVariations = l33tVariant({ l33t, subs, token });\n    const reversedVariations = (reversed && 2) || 1;\n    let calculation;\n    if (dictionaryName === 'diceware') {\n        // diceware dictionaries are special, so we get a simple scoring of 1/2 of 6^5 (6 digits on 5 dice)\n        // to get fix entropy of ~12.9 bits for every entry https://en.wikipedia.org/wiki/Diceware#:~:text=The%20level%20of,bits\n        calculation = 6 ** 5 / 2;\n    }\n    else {\n        calculation =\n            baseGuesses * uppercaseVariations * l33tVariations * reversedVariations;\n    }\n    return {\n        baseGuesses,\n        uppercaseVariations,\n        l33tVariations,\n        calculation,\n    };\n};\n//# sourceMappingURL=scoring.js.map","import { MIN_YEAR_SPACE, REFERENCE_YEAR } from '../../data/const';\nexport default ({ regexName, regexMatch, token, }) => {\n    const charClassBases = {\n        alphaLower: 26,\n        alphaUpper: 26,\n        alpha: 52,\n        alphanumeric: 62,\n        digits: 10,\n        symbols: 33,\n    };\n    if (regexName in charClassBases) {\n        return (charClassBases[regexName] ** token.length);\n    }\n    // TODO add more regex types for example special dates like 09.11\n    // eslint-disable-next-line default-case\n    switch (regexName) {\n        case 'recentYear':\n            // conservative estimate of year space: num years from REFERENCE_YEAR.\n            // if year is close to REFERENCE_YEAR, estimate a year space of MIN_YEAR_SPACE.\n            return Math.max(Math.abs(parseInt(regexMatch[0], 10) - REFERENCE_YEAR), MIN_YEAR_SPACE);\n    }\n    return 0;\n};\n//# sourceMappingURL=scoring.js.map","export default ({ baseGuesses, repeatCount }) => baseGuesses * repeatCount;\n//# sourceMappingURL=scoring.js.map","export default ({ token, ascending }) => {\n    const firstChr = token.charAt(0);\n    let baseGuesses = 0;\n    const startingPoints = ['a', 'A', 'z', 'Z', '0', '1', '9'];\n    // lower guesses for obvious starting points\n    if (startingPoints.includes(firstChr)) {\n        baseGuesses = 4;\n    }\n    else if (firstChr.match(/\\d/)) {\n        baseGuesses = 10; // digits\n    }\n    else {\n        // could give a higher base for uppercase,\n        // assigning 26 to both upper and lower sequences is more conservative.\n        baseGuesses = 26;\n    }\n    // need to try a descending sequence in addition to every ascending sequence ->\n    // 2x guesses\n    if (!ascending) {\n        baseGuesses *= 2;\n    }\n    return baseGuesses * token.length;\n};\n//# sourceMappingURL=scoring.js.map","import utils from '../../scoring/utils';\nimport { zxcvbnOptions } from '../../Options';\nconst calcAverageDegree = (graph) => {\n    let average = 0;\n    Object.keys(graph).forEach((key) => {\n        const neighbors = graph[key];\n        average += neighbors.filter((entry) => !!entry).length;\n    });\n    average /= Object.entries(graph).length;\n    return average;\n};\nconst estimatePossiblePatterns = ({ token, graph, turns, }) => {\n    const startingPosition = Object.keys(zxcvbnOptions.graphs[graph]).length;\n    const averageDegree = calcAverageDegree(zxcvbnOptions.graphs[graph]);\n    let guesses = 0;\n    const tokenLength = token.length;\n    // # estimate the number of possible patterns w/ tokenLength or less with turns or less.\n    for (let i = 2; i <= tokenLength; i += 1) {\n        const possibleTurns = Math.min(turns, i - 1);\n        for (let j = 1; j <= possibleTurns; j += 1) {\n            guesses += utils.nCk(i - 1, j - 1) * startingPosition * averageDegree ** j;\n        }\n    }\n    return guesses;\n};\nexport default ({ graph, token, shiftedCount, turns, }) => {\n    let guesses = estimatePossiblePatterns({ token, graph, turns });\n    // add extra guesses for shifted keys. (% instead of 5, A instead of a.)\n    // math is similar to extra guesses of l33t substitutions in dictionary matches.\n    if (shiftedCount) {\n        const unShiftedCount = token.length - shiftedCount;\n        if (shiftedCount === 0 || unShiftedCount === 0) {\n            guesses *= 2;\n        }\n        else {\n            let shiftedVariations = 0;\n            for (let i = 1; i <= Math.min(shiftedCount, unShiftedCount); i += 1) {\n                shiftedVariations += utils.nCk(shiftedCount + unShiftedCount, i);\n            }\n            guesses *= shiftedVariations;\n        }\n    }\n    return Math.round(guesses);\n};\n//# sourceMappingURL=scoring.js.map","import { SEPERATOR_CHAR_COUNT } from '../../data/const';\nexport default () => {\n    return SEPERATOR_CHAR_COUNT;\n};\n//# sourceMappingURL=scoring.js.map","import { MIN_SUBMATCH_GUESSES_SINGLE_CHAR, MIN_SUBMATCH_GUESSES_MULTI_CHAR, } from '../data/const';\nimport utils from './utils';\nimport { zxcvbnOptions } from '../Options';\nimport bruteforceMatcher from '../matcher/bruteforce/scoring';\nimport dateMatcher from '../matcher/date/scoring';\nimport dictionaryMatcher from '../matcher/dictionary/scoring';\nimport regexMatcher from '../matcher/regex/scoring';\nimport repeatMatcher from '../matcher/repeat/scoring';\nimport sequenceMatcher from '../matcher/sequence/scoring';\nimport spatialMatcher from '../matcher/spatial/scoring';\nimport separatorMatcher from '../matcher/separator/scoring';\nconst getMinGuesses = (match, password) => {\n    let minGuesses = 1;\n    if (match.token.length < password.length) {\n        if (match.token.length === 1) {\n            minGuesses = MIN_SUBMATCH_GUESSES_SINGLE_CHAR;\n        }\n        else {\n            minGuesses = MIN_SUBMATCH_GUESSES_MULTI_CHAR;\n        }\n    }\n    return minGuesses;\n};\nconst matchers = {\n    bruteforce: bruteforceMatcher,\n    date: dateMatcher,\n    dictionary: dictionaryMatcher,\n    regex: regexMatcher,\n    repeat: repeatMatcher,\n    sequence: sequenceMatcher,\n    spatial: spatialMatcher,\n    separator: separatorMatcher,\n};\nconst getScoring = (name, match) => {\n    if (matchers[name]) {\n        return matchers[name](match);\n    }\n    if (zxcvbnOptions.matchers[name] &&\n        'scoring' in zxcvbnOptions.matchers[name]) {\n        return zxcvbnOptions.matchers[name].scoring(match);\n    }\n    return 0;\n};\n// ------------------------------------------------------------------------------\n// guess estimation -- one function per match pattern ---------------------------\n// ------------------------------------------------------------------------------\n// eslint-disable-next-line complexity, max-statements\nexport default (match, password) => {\n    const extraData = {};\n    // a match's guess estimate doesn't change. cache it.\n    if ('guesses' in match && match.guesses != null) {\n        return match;\n    }\n    const minGuesses = getMinGuesses(match, password);\n    const estimationResult = getScoring(match.pattern, match);\n    let guesses = 0;\n    if (typeof estimationResult === 'number') {\n        guesses = estimationResult;\n    }\n    else if (match.pattern === 'dictionary') {\n        guesses = estimationResult.calculation;\n        extraData.baseGuesses = estimationResult.baseGuesses;\n        extraData.uppercaseVariations = estimationResult.uppercaseVariations;\n        extraData.l33tVariations = estimationResult.l33tVariations;\n    }\n    const matchGuesses = Math.max(guesses, minGuesses);\n    return {\n        ...match,\n        ...extraData,\n        guesses: matchGuesses,\n        guessesLog10: utils.log10(matchGuesses),\n    };\n};\n//# sourceMappingURL=estimate.js.map","import utils from './utils';\nimport estimateGuesses from './estimate';\nimport { MIN_GUESSES_BEFORE_GROWING_SEQUENCE } from '../data/const';\nconst scoringHelper = {\n    password: '',\n    optimal: {},\n    excludeAdditive: false,\n    separatorRegex: undefined,\n    fillArray(size, valueType) {\n        const result = [];\n        for (let i = 0; i < size; i += 1) {\n            let value = [];\n            if (valueType === 'object') {\n                value = {};\n            }\n            result.push(value);\n        }\n        return result;\n    },\n    // helper: make bruteforce match objects spanning i to j, inclusive.\n    makeBruteforceMatch(i, j) {\n        return {\n            pattern: 'bruteforce',\n            token: this.password.slice(i, +j + 1 || 9e9),\n            i,\n            j,\n        };\n    },\n    // helper: considers whether a length-sequenceLength\n    // sequence ending at match m is better (fewer guesses)\n    // than previously encountered sequences, updating state if so.\n    update(match, sequenceLength) {\n        const k = match.j;\n        const estimatedMatch = estimateGuesses(match, this.password);\n        let pi = estimatedMatch.guesses;\n        if (sequenceLength > 1) {\n            // we're considering a length-sequenceLength sequence ending with match m:\n            // obtain the product term in the minimization function by multiplying m's guesses\n            // by the product of the length-(sequenceLength-1)\n            // sequence ending just before m, at m.i - 1.\n            pi *= this.optimal.pi[estimatedMatch.i - 1][sequenceLength - 1];\n        }\n        // calculate the minimization func\n        let g = utils.factorial(sequenceLength) * pi;\n        if (!this.excludeAdditive) {\n            g += MIN_GUESSES_BEFORE_GROWING_SEQUENCE ** (sequenceLength - 1);\n        }\n        // update state if new best.\n        // first see if any competing sequences covering this prefix,\n        // with sequenceLength or fewer matches,\n        // fare better than this sequence. if so, skip it and return.\n        let shouldSkip = false;\n        Object.keys(this.optimal.g[k]).forEach((competingPatternLength) => {\n            const competingMetricMatch = this.optimal.g[k][competingPatternLength];\n            if (parseInt(competingPatternLength, 10) <= sequenceLength) {\n                if (competingMetricMatch <= g) {\n                    shouldSkip = true;\n                }\n            }\n        });\n        if (!shouldSkip) {\n            // this sequence might be part of the final optimal sequence.\n            this.optimal.g[k][sequenceLength] = g;\n            this.optimal.m[k][sequenceLength] = estimatedMatch;\n            this.optimal.pi[k][sequenceLength] = pi;\n        }\n    },\n    // helper: evaluate bruteforce matches ending at passwordCharIndex.\n    bruteforceUpdate(passwordCharIndex) {\n        // see if a single bruteforce match spanning the passwordCharIndex-prefix is optimal.\n        let match = this.makeBruteforceMatch(0, passwordCharIndex);\n        this.update(match, 1);\n        for (let i = 1; i <= passwordCharIndex; i += 1) {\n            // generate passwordCharIndex bruteforce matches, spanning from (i=1, j=passwordCharIndex) up to (i=passwordCharIndex, j=passwordCharIndex).\n            // see if adding these new matches to any of the sequences in optimal[i-1]\n            // leads to new bests.\n            match = this.makeBruteforceMatch(i, passwordCharIndex);\n            const tmp = this.optimal.m[i - 1];\n            // eslint-disable-next-line no-loop-func\n            Object.keys(tmp).forEach((sequenceLength) => {\n                const lastMatch = tmp[sequenceLength];\n                // corner: an optimal sequence will never have two adjacent bruteforce matches.\n                // it is strictly better to have a single bruteforce match spanning the same region:\n                // same contribution to the guess product with a lower length.\n                // --> safe to skip those cases.\n                if (lastMatch.pattern !== 'bruteforce') {\n                    // try adding m to this length-sequenceLength sequence.\n                    this.update(match, parseInt(sequenceLength, 10) + 1);\n                }\n            });\n        }\n    },\n    // helper: step backwards through optimal.m starting at the end,\n    // constructing the final optimal match sequence.\n    unwind(passwordLength) {\n        const optimalMatchSequence = [];\n        let k = passwordLength - 1;\n        // find the final best sequence length and score\n        let sequenceLength = 0;\n        // eslint-disable-next-line no-loss-of-precision\n        let g = 2e308;\n        const temp = this.optimal.g[k];\n        // safety check for empty passwords\n        if (temp) {\n            Object.keys(temp).forEach((candidateSequenceLength) => {\n                const candidateMetricMatch = temp[candidateSequenceLength];\n                if (candidateMetricMatch < g) {\n                    sequenceLength = parseInt(candidateSequenceLength, 10);\n                    g = candidateMetricMatch;\n                }\n            });\n        }\n        while (k >= 0) {\n            const match = this.optimal.m[k][sequenceLength];\n            optimalMatchSequence.unshift(match);\n            k = match.i - 1;\n            sequenceLength -= 1;\n        }\n        return optimalMatchSequence;\n    },\n};\nexport default {\n    // ------------------------------------------------------------------------------\n    // search --- most guessable match sequence -------------------------------------\n    // ------------------------------------------------------------------------------\n    //\n    // takes a sequence of overlapping matches, returns the non-overlapping sequence with\n    // minimum guesses. the following is a O(l_max * (n + m)) dynamic programming algorithm\n    // for a length-n password with m candidate matches. l_max is the maximum optimal\n    // sequence length spanning each prefix of the password. In practice it rarely exceeds 5 and the\n    // search terminates rapidly.\n    //\n    // the optimal \"minimum guesses\" sequence is here defined to be the sequence that\n    // minimizes the following function:\n    //\n    //    g = sequenceLength! * Product(m.guesses for m in sequence) + D^(sequenceLength - 1)\n    //\n    // where sequenceLength is the length of the sequence.\n    //\n    // the factorial term is the number of ways to order sequenceLength patterns.\n    //\n    // the D^(sequenceLength-1) term is another length penalty, roughly capturing the idea that an\n    // attacker will try lower-length sequences first before trying length-sequenceLength sequences.\n    //\n    // for example, consider a sequence that is date-repeat-dictionary.\n    //  - an attacker would need to try other date-repeat-dictionary combinations,\n    //    hence the product term.\n    //  - an attacker would need to try repeat-date-dictionary, dictionary-repeat-date,\n    //    ..., hence the factorial term.\n    //  - an attacker would also likely try length-1 (dictionary) and length-2 (dictionary-date)\n    //    sequences before length-3. assuming at minimum D guesses per pattern type,\n    //    D^(sequenceLength-1) approximates Sum(D^i for i in [1..sequenceLength-1]\n    //\n    // ------------------------------------------------------------------------------\n    mostGuessableMatchSequence(password, matches, excludeAdditive = false) {\n        scoringHelper.password = password;\n        scoringHelper.excludeAdditive = excludeAdditive;\n        const passwordLength = password.length;\n        // partition matches into sublists according to ending index j\n        let matchesByCoordinateJ = scoringHelper.fillArray(passwordLength, 'array');\n        matches.forEach((match) => {\n            matchesByCoordinateJ[match.j].push(match);\n        });\n        // small detail: for deterministic output, sort each sublist by i.\n        matchesByCoordinateJ = matchesByCoordinateJ.map((match) => match.sort((m1, m2) => m1.i - m2.i));\n        scoringHelper.optimal = {\n            // optimal.m[k][sequenceLength] holds final match in the best length-sequenceLength\n            // match sequence covering the\n            // password prefix up to k, inclusive.\n            // if there is no length-sequenceLength sequence that scores better (fewer guesses) than\n            // a shorter match sequence spanning the same prefix,\n            // optimal.m[k][sequenceLength] is undefined.\n            m: scoringHelper.fillArray(passwordLength, 'object'),\n            // same structure as optimal.m -- holds the product term Prod(m.guesses for m in sequence).\n            // optimal.pi allows for fast (non-looping) updates to the minimization function.\n            pi: scoringHelper.fillArray(passwordLength, 'object'),\n            // same structure as optimal.m -- holds the overall metric.\n            g: scoringHelper.fillArray(passwordLength, 'object'),\n        };\n        for (let k = 0; k < passwordLength; k += 1) {\n            matchesByCoordinateJ[k].forEach((match) => {\n                if (match.i > 0) {\n                    Object.keys(scoringHelper.optimal.m[match.i - 1]).forEach((sequenceLength) => {\n                        scoringHelper.update(match, parseInt(sequenceLength, 10) + 1);\n                    });\n                }\n                else {\n                    scoringHelper.update(match, 1);\n                }\n            });\n            scoringHelper.bruteforceUpdate(k);\n        }\n        const optimalMatchSequence = scoringHelper.unwind(passwordLength);\n        const optimalSequenceLength = optimalMatchSequence.length;\n        const guesses = this.getGuesses(password, optimalSequenceLength);\n        return {\n            password,\n            guesses,\n            guessesLog10: utils.log10(guesses),\n            sequence: optimalMatchSequence,\n        };\n    },\n    getGuesses(password, optimalSequenceLength) {\n        const passwordLength = password.length;\n        let guesses = 0;\n        if (password.length === 0) {\n            guesses = 1;\n        }\n        else {\n            guesses =\n                scoringHelper.optimal.g[passwordLength - 1][optimalSequenceLength];\n        }\n        return guesses;\n    },\n};\n//# sourceMappingURL=index.js.map","import scoring from '../../scoring';\n/*\n *-------------------------------------------------------------------------------\n * repeats (aaa, abcabcabc) ------------------------------\n *-------------------------------------------------------------------------------\n */\nclass MatchRepeat {\n    // eslint-disable-next-line max-statements\n    match({ password, omniMatch }) {\n        const matches = [];\n        let lastIndex = 0;\n        while (lastIndex < password.length) {\n            const greedyMatch = this.getGreedyMatch(password, lastIndex);\n            const lazyMatch = this.getLazyMatch(password, lastIndex);\n            if (greedyMatch == null) {\n                break;\n            }\n            const { match, baseToken } = this.setMatchToken(greedyMatch, lazyMatch);\n            if (match) {\n                const j = match.index + match[0].length - 1;\n                const baseGuesses = this.getBaseGuesses(baseToken, omniMatch);\n                matches.push(this.normalizeMatch(baseToken, j, match, baseGuesses));\n                lastIndex = j + 1;\n            }\n        }\n        const hasPromises = matches.some((match) => {\n            return match instanceof Promise;\n        });\n        if (hasPromises) {\n            return Promise.all(matches);\n        }\n        return matches;\n    }\n    // eslint-disable-next-line max-params\n    normalizeMatch(baseToken, j, match, baseGuesses) {\n        const baseMatch = {\n            pattern: 'repeat',\n            i: match.index,\n            j,\n            token: match[0],\n            baseToken,\n            baseGuesses: 0,\n            repeatCount: match[0].length / baseToken.length,\n        };\n        if (baseGuesses instanceof Promise) {\n            return baseGuesses.then((resolvedBaseGuesses) => {\n                return {\n                    ...baseMatch,\n                    baseGuesses: resolvedBaseGuesses,\n                };\n            });\n        }\n        return {\n            ...baseMatch,\n            baseGuesses,\n        };\n    }\n    getGreedyMatch(password, lastIndex) {\n        const greedy = /(.+)\\1+/g;\n        greedy.lastIndex = lastIndex;\n        return greedy.exec(password);\n    }\n    getLazyMatch(password, lastIndex) {\n        const lazy = /(.+?)\\1+/g;\n        lazy.lastIndex = lastIndex;\n        return lazy.exec(password);\n    }\n    setMatchToken(greedyMatch, lazyMatch) {\n        const lazyAnchored = /^(.+?)\\1+$/;\n        let match;\n        let baseToken = '';\n        if (lazyMatch && greedyMatch[0].length > lazyMatch[0].length) {\n            // greedy beats lazy for 'aabaab'\n            // greedy: [aabaab, aab]\n            // lazy:   [aa,     a]\n            match = greedyMatch;\n            // greedy's repeated string might itself be repeated, eg.\n            // aabaab in aabaabaabaab.\n            // run an anchored lazy match on greedy's repeated string\n            // to find the shortest repeated string\n            const temp = lazyAnchored.exec(match[0]);\n            if (temp) {\n                baseToken = temp[1];\n            }\n        }\n        else {\n            // lazy beats greedy for 'aaaaa'\n            // greedy: [aaaa,  aa]\n            // lazy:   [aaaaa, a]\n            match = lazyMatch;\n            if (match) {\n                baseToken = match[1];\n            }\n        }\n        return {\n            match,\n            baseToken,\n        };\n    }\n    getBaseGuesses(baseToken, omniMatch) {\n        const matches = omniMatch.match(baseToken);\n        if (matches instanceof Promise) {\n            return matches.then((resolvedMatches) => {\n                const baseAnalysis = scoring.mostGuessableMatchSequence(baseToken, resolvedMatches);\n                return baseAnalysis.guesses;\n            });\n        }\n        const baseAnalysis = scoring.mostGuessableMatchSequence(baseToken, matches);\n        return baseAnalysis.guesses;\n    }\n}\nexport default MatchRepeat;\n//# sourceMappingURL=matching.js.map","import { ALL_UPPER, ALL_LOWER, ALL_DIGIT } from '../../data/const';\n/*\n *-------------------------------------------------------------------------------\n * sequences (abcdef) ------------------------------\n *-------------------------------------------------------------------------------\n */\nclass MatchSequence {\n    constructor() {\n        this.MAX_DELTA = 5;\n    }\n    // eslint-disable-next-line max-statements\n    match({ password }) {\n        /*\n         * Identifies sequences by looking for repeated differences in unicode codepoint.\n         * this allows skipping, such as 9753, and also matches some extended unicode sequences\n         * such as Greek and Cyrillic alphabets.\n         *\n         * for example, consider the input 'abcdb975zy'\n         *\n         * password: a   b   c   d   b    9   7   5   z   y\n         * index:    0   1   2   3   4    5   6   7   8   9\n         * delta:      1   1   1  -2  -41  -2  -2  69   1\n         *\n         * expected result:\n         * [(i, j, delta), ...] = [(0, 3, 1), (5, 7, -2), (8, 9, 1)]\n         */\n        const result = [];\n        if (password.length === 1) {\n            return [];\n        }\n        let i = 0;\n        let lastDelta = null;\n        const passwordLength = password.length;\n        for (let k = 1; k < passwordLength; k += 1) {\n            const delta = password.charCodeAt(k) - password.charCodeAt(k - 1);\n            if (lastDelta == null) {\n                lastDelta = delta;\n            }\n            if (delta !== lastDelta) {\n                const j = k - 1;\n                this.update({\n                    i,\n                    j,\n                    delta: lastDelta,\n                    password,\n                    result,\n                });\n                i = j;\n                lastDelta = delta;\n            }\n        }\n        this.update({\n            i,\n            j: passwordLength - 1,\n            delta: lastDelta,\n            password,\n            result,\n        });\n        return result;\n    }\n    update({ i, j, delta, password, result }) {\n        if (j - i > 1 || Math.abs(delta) === 1) {\n            const absoluteDelta = Math.abs(delta);\n            if (absoluteDelta > 0 && absoluteDelta <= this.MAX_DELTA) {\n                const token = password.slice(i, +j + 1 || 9e9);\n                const { sequenceName, sequenceSpace } = this.getSequence(token);\n                return result.push({\n                    pattern: 'sequence',\n                    i,\n                    j,\n                    token: password.slice(i, +j + 1 || 9e9),\n                    sequenceName,\n                    sequenceSpace,\n                    ascending: delta > 0,\n                });\n            }\n        }\n        return null;\n    }\n    getSequence(token) {\n        // TODO conservatively stick with roman alphabet size.\n        //  (this could be improved)\n        let sequenceName = 'unicode';\n        let sequenceSpace = 26;\n        if (ALL_LOWER.test(token)) {\n            sequenceName = 'lower';\n            sequenceSpace = 26;\n        }\n        else if (ALL_UPPER.test(token)) {\n            sequenceName = 'upper';\n            sequenceSpace = 26;\n        }\n        else if (ALL_DIGIT.test(token)) {\n            sequenceName = 'digits';\n            sequenceSpace = 10;\n        }\n        return {\n            sequenceName,\n            sequenceSpace,\n        };\n    }\n}\nexport default MatchSequence;\n//# sourceMappingURL=matching.js.map","import { sorted, extend } from '../../helper';\nimport { zxcvbnOptions } from '../../Options';\n/*\n * ------------------------------------------------------------------------------\n * spatial match (qwerty/dvorak/keypad and so on) -----------------------------------------\n * ------------------------------------------------------------------------------\n */\nclass MatchSpatial {\n    constructor() {\n        this.SHIFTED_RX = /[~!@#$%^&*()_+QWERTYUIOP{}|ASDFGHJKL:\"ZXCVBNM<>?]/;\n    }\n    match({ password }) {\n        const matches = [];\n        Object.keys(zxcvbnOptions.graphs).forEach((graphName) => {\n            const graph = zxcvbnOptions.graphs[graphName];\n            extend(matches, this.helper(password, graph, graphName));\n        });\n        return sorted(matches);\n    }\n    checkIfShifted(graphName, password, index) {\n        if (!graphName.includes('keypad') &&\n            // initial character is shifted\n            this.SHIFTED_RX.test(password.charAt(index))) {\n            return 1;\n        }\n        return 0;\n    }\n    // eslint-disable-next-line complexity, max-statements\n    helper(password, graph, graphName) {\n        let shiftedCount;\n        const matches = [];\n        let i = 0;\n        const passwordLength = password.length;\n        while (i < passwordLength - 1) {\n            let j = i + 1;\n            let lastDirection = null;\n            let turns = 0;\n            shiftedCount = this.checkIfShifted(graphName, password, i);\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                const prevChar = password.charAt(j - 1);\n                const adjacents = graph[prevChar] || [];\n                let found = false;\n                let foundDirection = -1;\n                let curDirection = -1;\n                // consider growing pattern by one character if j hasn't gone over the edge.\n                if (j < passwordLength) {\n                    const curChar = password.charAt(j);\n                    const adjacentsLength = adjacents.length;\n                    for (let k = 0; k < adjacentsLength; k += 1) {\n                        const adjacent = adjacents[k];\n                        curDirection += 1;\n                        // eslint-disable-next-line max-depth\n                        if (adjacent) {\n                            const adjacentIndex = adjacent.indexOf(curChar);\n                            // eslint-disable-next-line max-depth\n                            if (adjacentIndex !== -1) {\n                                found = true;\n                                foundDirection = curDirection;\n                                // eslint-disable-next-line max-depth\n                                if (adjacentIndex === 1) {\n                                    // # index 1 in the adjacency means the key is shifted,\n                                    // # 0 means unshifted: A vs a, % vs 5, etc.\n                                    // # for example, 'q' is adjacent to the entry '2@'.\n                                    // # @ is shifted w/ index 1, 2 is unshifted.\n                                    shiftedCount += 1;\n                                }\n                                // eslint-disable-next-line max-depth\n                                if (lastDirection !== foundDirection) {\n                                    // # adding a turn is correct even in the initial\n                                    // case when last_direction is null:\n                                    // # every spatial pattern starts with a turn.\n                                    turns += 1;\n                                    lastDirection = foundDirection;\n                                }\n                                break;\n                            }\n                        }\n                    }\n                }\n                // if the current pattern continued, extend j and try to grow again\n                if (found) {\n                    j += 1;\n                    // otherwise push the pattern discovered so far, if any...\n                }\n                else {\n                    // don't consider length 1 or 2 chains.\n                    if (j - i > 2) {\n                        matches.push({\n                            pattern: 'spatial',\n                            i,\n                            j: j - 1,\n                            token: password.slice(i, j),\n                            graph: graphName,\n                            turns,\n                            shiftedCount,\n                        });\n                    }\n                    // ...and then start a new search for the rest of the password.\n                    i = j;\n                    break;\n                }\n            }\n        }\n        return matches;\n    }\n}\nexport default MatchSpatial;\n//# sourceMappingURL=matching.js.map","import { SEPERATOR_CHARS } from '../../data/const';\nconst separatorRegex = new RegExp(`[${SEPERATOR_CHARS.join('')}]`);\n/*\n *-------------------------------------------------------------------------------\n * separators (any semi-repeated special character) -----------------------------\n *-------------------------------------------------------------------------------\n */\nclass MatchSeparator {\n    static getMostUsedSeparatorChar(password) {\n        const mostUsedSeperators = [\n            ...password\n                .split('')\n                .filter((c) => separatorRegex.test(c))\n                .reduce((memo, c) => {\n                const m = memo.get(c);\n                if (m) {\n                    memo.set(c, m + 1);\n                }\n                else {\n                    memo.set(c, 1);\n                }\n                return memo;\n            }, new Map())\n                .entries(),\n        ].sort(([_a, a], [_b, b]) => b - a);\n        if (!mostUsedSeperators.length)\n            return undefined;\n        const match = mostUsedSeperators[0];\n        // If the special character is only used once, don't treat it like a separator\n        if (match[1] < 2)\n            return undefined;\n        return match[0];\n    }\n    static getSeparatorRegex(separator) {\n        return new RegExp(`([^${separator}\\n])(${separator})(?!${separator})`, 'g');\n        // negative lookbehind can be added again in a few years when it is more supported by the browsers (currently 2023)\n        // https://github.com/zxcvbn-ts/zxcvbn/issues/202\n        // return new RegExp(`(?<!${separator})(${separator})(?!${separator})`, 'g')\n    }\n    // eslint-disable-next-line max-statements\n    match({ password }) {\n        const result = [];\n        if (password.length === 0)\n            return result;\n        const mostUsedSpecial = MatchSeparator.getMostUsedSeparatorChar(password);\n        if (mostUsedSpecial === undefined)\n            return result;\n        const isSeparator = MatchSeparator.getSeparatorRegex(mostUsedSpecial);\n        // eslint-disable-next-line no-restricted-syntax\n        for (const match of password.matchAll(isSeparator)) {\n            // eslint-disable-next-line no-continue\n            if (match.index === undefined)\n                continue;\n            // add one to the index because we changed the regex from negative lookbehind to something simple.\n            // this simple approach uses the first character before the separater too but we only need the index of the separater\n            // https://github.com/zxcvbn-ts/zxcvbn/issues/202\n            const i = match.index + 1;\n            result.push({\n                pattern: 'separator',\n                token: mostUsedSpecial,\n                i,\n                j: i,\n            });\n        }\n        return result;\n    }\n}\nexport default MatchSeparator;\n//# sourceMappingURL=matching.js.map","import { extend, sorted } from './helper';\nimport dateMatcher from './matcher/date/matching';\nimport dictionaryMatcher from './matcher/dictionary/matching';\nimport regexMatcher from './matcher/regex/matching';\nimport repeatMatcher from './matcher/repeat/matching';\nimport sequenceMatcher from './matcher/sequence/matching';\nimport spatialMatcher from './matcher/spatial/matching';\nimport separatorMatcher from './matcher/separator/matching';\nimport { zxcvbnOptions } from './Options';\nclass Matching {\n    constructor() {\n        this.matchers = {\n            date: dateMatcher,\n            dictionary: dictionaryMatcher,\n            regex: regexMatcher,\n            // @ts-ignore => TODO resolve this type issue. This is because it is possible to be async\n            repeat: repeatMatcher,\n            sequence: sequenceMatcher,\n            spatial: spatialMatcher,\n            separator: separatorMatcher,\n        };\n    }\n    match(password) {\n        const matches = [];\n        const promises = [];\n        const matchers = [\n            ...Object.keys(this.matchers),\n            ...Object.keys(zxcvbnOptions.matchers),\n        ];\n        matchers.forEach((key) => {\n            if (!this.matchers[key] && !zxcvbnOptions.matchers[key]) {\n                return;\n            }\n            const Matcher = this.matchers[key]\n                ? this.matchers[key]\n                : zxcvbnOptions.matchers[key].Matching;\n            const usedMatcher = new Matcher();\n            const result = usedMatcher.match({\n                password,\n                omniMatch: this,\n            });\n            if (result instanceof Promise) {\n                result.then((response) => {\n                    extend(matches, response);\n                });\n                promises.push(result);\n            }\n            else {\n                extend(matches, result);\n            }\n        });\n        if (promises.length > 0) {\n            return new Promise((resolve, reject) => {\n                Promise.all(promises)\n                    .then(() => {\n                    resolve(sorted(matches));\n                })\n                    .catch((error) => {\n                    reject(error);\n                });\n            });\n        }\n        return sorted(matches);\n    }\n}\nexport default Matching;\n//# sourceMappingURL=Matching.js.map","import { zxcvbnOptions } from './Options';\nconst SECOND = 1;\nconst MINUTE = SECOND * 60;\nconst HOUR = MINUTE * 60;\nconst DAY = HOUR * 24;\nconst MONTH = DAY * 31;\nconst YEAR = MONTH * 12;\nconst CENTURY = YEAR * 100;\nconst times = {\n    second: SECOND,\n    minute: MINUTE,\n    hour: HOUR,\n    day: DAY,\n    month: MONTH,\n    year: YEAR,\n    century: CENTURY,\n};\n/*\n * -------------------------------------------------------------------------------\n *  Estimates time for an attacker ---------------------------------------------------------------\n * -------------------------------------------------------------------------------\n */\nclass TimeEstimates {\n    translate(displayStr, value) {\n        let key = displayStr;\n        if (value !== undefined && value !== 1) {\n            key += 's';\n        }\n        const { timeEstimation } = zxcvbnOptions.translations;\n        return timeEstimation[key].replace('{base}', `${value}`);\n    }\n    estimateAttackTimes(guesses) {\n        const crackTimesSeconds = {\n            onlineThrottling100PerHour: guesses / (100 / 3600),\n            onlineNoThrottling10PerSecond: guesses / 10,\n            offlineSlowHashing1e4PerSecond: guesses / 1e4,\n            offlineFastHashing1e10PerSecond: guesses / 1e10,\n        };\n        const crackTimesDisplay = {\n            onlineThrottling100PerHour: '',\n            onlineNoThrottling10PerSecond: '',\n            offlineSlowHashing1e4PerSecond: '',\n            offlineFastHashing1e10PerSecond: '',\n        };\n        Object.keys(crackTimesSeconds).forEach((scenario) => {\n            const seconds = crackTimesSeconds[scenario];\n            crackTimesDisplay[scenario] =\n                this.displayTime(seconds);\n        });\n        return {\n            crackTimesSeconds,\n            crackTimesDisplay,\n            score: this.guessesToScore(guesses),\n        };\n    }\n    guessesToScore(guesses) {\n        const DELTA = 5;\n        if (guesses < 1e3 + DELTA) {\n            // risky password: \"too guessable\"\n            return 0;\n        }\n        if (guesses < 1e6 + DELTA) {\n            // modest protection from throttled online attacks: \"very guessable\"\n            return 1;\n        }\n        if (guesses < 1e8 + DELTA) {\n            // modest protection from unthrottled online attacks: \"somewhat guessable\"\n            return 2;\n        }\n        if (guesses < 1e10 + DELTA) {\n            // modest protection from offline attacks: \"safely unguessable\"\n            // assuming a salted, slow hash function like bcrypt, scrypt, PBKDF2, argon, etc\n            return 3;\n        }\n        // strong protection from offline attacks under same scenario: \"very unguessable\"\n        return 4;\n    }\n    displayTime(seconds) {\n        let displayStr = 'centuries';\n        let base;\n        const timeKeys = Object.keys(times);\n        const foundIndex = timeKeys.findIndex((time) => seconds < times[time]);\n        if (foundIndex > -1) {\n            displayStr = timeKeys[foundIndex - 1];\n            if (foundIndex !== 0) {\n                base = Math.round(seconds / times[displayStr]);\n            }\n            else {\n                displayStr = 'ltSecond';\n            }\n        }\n        return this.translate(displayStr, base);\n    }\n}\nexport default TimeEstimates;\n//# sourceMappingURL=TimeEstimates.js.map","export default () => {\n    return null;\n};\n//# sourceMappingURL=feedback.js.map","import { zxcvbnOptions } from '../../Options';\nexport default () => {\n    return {\n        warning: zxcvbnOptions.translations.warnings.dates,\n        suggestions: [zxcvbnOptions.translations.suggestions.dates],\n    };\n};\n//# sourceMappingURL=feedback.js.map","import { zxcvbnOptions } from '../../Options';\nimport { ALL_UPPER_INVERTED, START_UPPER } from '../../data/const';\nconst getDictionaryWarningPassword = (match, isSoleMatch) => {\n    let warning = null;\n    if (isSoleMatch && !match.l33t && !match.reversed) {\n        if (match.rank <= 10) {\n            warning = zxcvbnOptions.translations.warnings.topTen;\n        }\n        else if (match.rank <= 100) {\n            warning = zxcvbnOptions.translations.warnings.topHundred;\n        }\n        else {\n            warning = zxcvbnOptions.translations.warnings.common;\n        }\n    }\n    else if (match.guessesLog10 <= 4) {\n        warning = zxcvbnOptions.translations.warnings.similarToCommon;\n    }\n    return warning;\n};\nconst getDictionaryWarningWikipedia = (match, isSoleMatch) => {\n    let warning = null;\n    if (isSoleMatch) {\n        warning = zxcvbnOptions.translations.warnings.wordByItself;\n    }\n    return warning;\n};\nconst getDictionaryWarningNames = (match, isSoleMatch) => {\n    if (isSoleMatch) {\n        return zxcvbnOptions.translations.warnings.namesByThemselves;\n    }\n    return zxcvbnOptions.translations.warnings.commonNames;\n};\nconst getDictionaryWarning = (match, isSoleMatch) => {\n    let warning = null;\n    const dictName = match.dictionaryName;\n    const isAName = dictName === 'lastnames' || dictName.toLowerCase().includes('firstnames');\n    if (dictName === 'passwords') {\n        warning = getDictionaryWarningPassword(match, isSoleMatch);\n    }\n    else if (dictName.includes('wikipedia')) {\n        warning = getDictionaryWarningWikipedia(match, isSoleMatch);\n    }\n    else if (isAName) {\n        warning = getDictionaryWarningNames(match, isSoleMatch);\n    }\n    else if (dictName === 'userInputs') {\n        warning = zxcvbnOptions.translations.warnings.userInputs;\n    }\n    return warning;\n};\nexport default (match, isSoleMatch) => {\n    const warning = getDictionaryWarning(match, isSoleMatch);\n    const suggestions = [];\n    const word = match.token;\n    if (word.match(START_UPPER)) {\n        suggestions.push(zxcvbnOptions.translations.suggestions.capitalization);\n    }\n    else if (word.match(ALL_UPPER_INVERTED) && word.toLowerCase() !== word) {\n        suggestions.push(zxcvbnOptions.translations.suggestions.allUppercase);\n    }\n    if (match.reversed && match.token.length >= 4) {\n        suggestions.push(zxcvbnOptions.translations.suggestions.reverseWords);\n    }\n    if (match.l33t) {\n        suggestions.push(zxcvbnOptions.translations.suggestions.l33t);\n    }\n    return {\n        warning,\n        suggestions,\n    };\n};\n//# sourceMappingURL=feedback.js.map","import { zxcvbnOptions } from '../../Options';\nexport default (match) => {\n    if (match.regexName === 'recentYear') {\n        return {\n            warning: zxcvbnOptions.translations.warnings.recentYears,\n            suggestions: [\n                zxcvbnOptions.translations.suggestions.recentYears,\n                zxcvbnOptions.translations.suggestions.associatedYears,\n            ],\n        };\n    }\n    return {\n        warning: null,\n        suggestions: [],\n    };\n};\n//# sourceMappingURL=feedback.js.map","import { zxcvbnOptions } from '../../Options';\nexport default (match) => {\n    let warning = zxcvbnOptions.translations.warnings.extendedRepeat;\n    if (match.baseToken.length === 1) {\n        warning = zxcvbnOptions.translations.warnings.simpleRepeat;\n    }\n    return {\n        warning,\n        suggestions: [zxcvbnOptions.translations.suggestions.repeated],\n    };\n};\n//# sourceMappingURL=feedback.js.map","import { zxcvbnOptions } from '../../Options';\nexport default () => {\n    return {\n        warning: zxcvbnOptions.translations.warnings.sequences,\n        suggestions: [zxcvbnOptions.translations.suggestions.sequences],\n    };\n};\n//# sourceMappingURL=feedback.js.map","import { zxcvbnOptions } from '../../Options';\nexport default (match) => {\n    let warning = zxcvbnOptions.translations.warnings.keyPattern;\n    if (match.turns === 1) {\n        warning = zxcvbnOptions.translations.warnings.straightRow;\n    }\n    return {\n        warning,\n        suggestions: [zxcvbnOptions.translations.suggestions.longerKeyboardPattern],\n    };\n};\n//# sourceMappingURL=feedback.js.map","export default () => {\n    // no suggestions\n    return null;\n};\n//# sourceMappingURL=feedback.js.map","import { zxcvbnOptions } from './Options';\nimport bruteforceMatcher from './matcher/bruteforce/feedback';\nimport dateMatcher from './matcher/date/feedback';\nimport dictionaryMatcher from './matcher/dictionary/feedback';\nimport regexMatcher from './matcher/regex/feedback';\nimport repeatMatcher from './matcher/repeat/feedback';\nimport sequenceMatcher from './matcher/sequence/feedback';\nimport spatialMatcher from './matcher/spatial/feedback';\nimport separatorMatcher from './matcher/separator/feedback';\nconst defaultFeedback = {\n    warning: null,\n    suggestions: [],\n};\n/*\n * -------------------------------------------------------------------------------\n *  Generate feedback ---------------------------------------------------------------\n * -------------------------------------------------------------------------------\n */\nclass Feedback {\n    constructor() {\n        this.matchers = {\n            bruteforce: bruteforceMatcher,\n            date: dateMatcher,\n            dictionary: dictionaryMatcher,\n            regex: regexMatcher,\n            repeat: repeatMatcher,\n            sequence: sequenceMatcher,\n            spatial: spatialMatcher,\n            separator: separatorMatcher,\n        };\n        this.defaultFeedback = {\n            warning: null,\n            suggestions: [],\n        };\n        this.setDefaultSuggestions();\n    }\n    setDefaultSuggestions() {\n        this.defaultFeedback.suggestions.push(zxcvbnOptions.translations.suggestions.useWords, zxcvbnOptions.translations.suggestions.noNeed);\n    }\n    getFeedback(score, sequence) {\n        if (sequence.length === 0) {\n            return this.defaultFeedback;\n        }\n        if (score > 2) {\n            return defaultFeedback;\n        }\n        const extraFeedback = zxcvbnOptions.translations.suggestions.anotherWord;\n        const longestMatch = this.getLongestMatch(sequence);\n        let feedback = this.getMatchFeedback(longestMatch, sequence.length === 1);\n        if (feedback !== null && feedback !== undefined) {\n            feedback.suggestions.unshift(extraFeedback);\n        }\n        else {\n            feedback = {\n                warning: null,\n                suggestions: [extraFeedback],\n            };\n        }\n        return feedback;\n    }\n    getLongestMatch(sequence) {\n        let longestMatch = sequence[0];\n        const slicedSequence = sequence.slice(1);\n        slicedSequence.forEach((match) => {\n            if (match.token.length > longestMatch.token.length) {\n                longestMatch = match;\n            }\n        });\n        return longestMatch;\n    }\n    getMatchFeedback(match, isSoleMatch) {\n        if (this.matchers[match.pattern]) {\n            return this.matchers[match.pattern](match, isSoleMatch);\n        }\n        if (zxcvbnOptions.matchers[match.pattern] &&\n            'feedback' in zxcvbnOptions.matchers[match.pattern]) {\n            return zxcvbnOptions.matchers[match.pattern].feedback(match, isSoleMatch);\n        }\n        return defaultFeedback;\n    }\n}\nexport default Feedback;\n//# sourceMappingURL=Feedback.js.map","/**\n * @link https://davidwalsh.name/javascript-debounce-function\n * @param func needs to implement a function which is debounced\n * @param wait how long do you want to wait till the previous declared function is executed\n * @param isImmediate defines if you want to execute the function on the first execution or the last execution inside the time window. `true` for first and `false` for last.\n */\nexport default (func, wait, isImmediate) => {\n    let timeout;\n    return function debounce(...args) {\n        const context = this;\n        const later = () => {\n            timeout = undefined;\n            if (!isImmediate) {\n                func.apply(context, args);\n            }\n        };\n        const shouldCallNow = isImmediate && !timeout;\n        if (timeout !== undefined) {\n            clearTimeout(timeout);\n        }\n        timeout = setTimeout(later, wait);\n        if (shouldCallNow) {\n            return func.apply(context, args);\n        }\n        return undefined;\n    };\n};\n//# sourceMappingURL=debounce.js.map","import Matching from './Matching';\nimport scoring from './scoring';\nimport TimeEstimates from './TimeEstimates';\nimport Feedback from './Feedback';\nimport { zxcvbnOptions, Options } from './Options';\nimport debounce from './debounce';\nconst time = () => new Date().getTime();\nconst createReturnValue = (resolvedMatches, password, start) => {\n    const feedback = new Feedback();\n    const timeEstimates = new TimeEstimates();\n    const matchSequence = scoring.mostGuessableMatchSequence(password, resolvedMatches);\n    const calcTime = time() - start;\n    const attackTimes = timeEstimates.estimateAttackTimes(matchSequence.guesses);\n    return {\n        calcTime,\n        ...matchSequence,\n        ...attackTimes,\n        feedback: feedback.getFeedback(attackTimes.score, matchSequence.sequence),\n    };\n};\nconst main = (password, userInputs) => {\n    if (userInputs) {\n        zxcvbnOptions.extendUserInputsDictionary(userInputs);\n    }\n    const matching = new Matching();\n    return matching.match(password);\n};\nexport const zxcvbn = (password, userInputs) => {\n    const start = time();\n    const matches = main(password, userInputs);\n    if (matches instanceof Promise) {\n        throw new Error('You are using a Promised matcher, please use `zxcvbnAsync` for it.');\n    }\n    return createReturnValue(matches, password, start);\n};\nexport const zxcvbnAsync = async (password, userInputs) => {\n    const usedPassword = password.substring(0, zxcvbnOptions.maxLength);\n    const start = time();\n    const matches = await main(usedPassword, userInputs);\n    return createReturnValue(matches, usedPassword, start);\n};\nexport * from './types';\nexport { zxcvbnOptions, Options, debounce };\n//# sourceMappingURL=index.js.map"],"names":["extend","listToExtend","list","push","apply","sorted","matches","sort","m1","m2","i","j","buildRankedDictionary","orderedList","result","counter","forEach","word","DATE_MAX_YEAR","DATE_MIN_YEAR","DATE_SPLITS","dateSplits","BRUTEFORCE_CARDINALITY","MIN_GUESSES_BEFORE_GROWING_SEQUENCE","MIN_SUBMATCH_GUESSES_SINGLE_CHAR","MIN_SUBMATCH_GUESSES_MULTI_CHAR","MIN_YEAR_SPACE","START_UPPER","END_UPPER","ALL_UPPER","ALL_UPPER_INVERTED","ALL_LOWER","ALL_LOWER_INVERTED","ONE_LOWER","ONE_UPPER","ALPHA_INVERTED","ALL_DIGIT","REFERENCE_YEAR","Date","getFullYear","REGEXEN","recentYear","SEPERATOR_CHARS","SEPERATOR_CHAR_COUNT","length","MatchDate","match","password","getMatchesWithoutSeparator","getMatchesWithSeparator","filteredMatches","filterNoise","maybeDateWithSeparator","Math","abs","token","slice","regexMatch","exec","dmy","mapIntegersToDayMonthYear","parseInt","pattern","separator","year","month","day","maybeDateNoSeparator","metric","candidate","candidates","index","splittedDates","k","l","bestCandidate","minDistance","distance","filter","isSubmatch","matchesLength","o","otherMatch","integers","over12","over31","under1","len1","int","getDayMonth","possibleYearSplits","possibleYearSplitsLength","y","rest","dm","mapIntegersToDayMonth","twoToFourDigitYear","temp","reverse","data","getUsedThreshold","entry","threshold","isPasswordToShort","isThresholdLongerThanPassword","shouldUsePasswordLength","ceil","findLevenshteinDistance","rankedDictionary","foundDistance","found","Object","keys","find","usedThreshold","foundEntryDistance","isInThreshold","levenshteinDistance","levenshteinDistanceEntry","a","b","c","d","e","f","g","h","m","n","q","u","s","t","v","w","x","z","warnings","straightRow","keyPattern","simpleRepeat","extendedRepeat","sequences","recentYears","dates","topTen","topHundred","common","similarToCommon","wordByItself","namesByThemselves","commonNames","userInputs","pwned","suggestions","l33t","reverseWords","allUppercase","capitalization","associatedYears","repeated","longerKeyboardPattern","anotherWord","useWords","noNeed","timeEstimation","ltSecond","second","seconds","minute","minutes","hour","hours","days","months","years","centuries","TrieNode","constructor","parents","children","Map","addSub","key","subs","firstChar","charAt","has","set","cur","get","hasChild","addChild","getChild","concat","child","isTerminal","l33tTable","triNode","entries","letter","substitutions","substitution","Options","matchers","trieNodeRoot","l33tTableToTrieNode","dictionary","rankedDictionaries","rankedDictionariesMaxWordSize","translations","translationKeys","graphs","useLevenshteinDistance","levenshteinThreshold","l33tMaxSubstitutions","maxLength","setRankedDictionaries","setOptions","options","setTranslations","undefined","checkCustomTranslations","Error","valid","type","translationType","rankedDictionariesMaxWorkSize","name","getRankedDictionariesMaxWordSize","map","el","toString","reduce","max","Infinity","buildSanitizedRankedDictionary","sanitizedInputs","input","inputType","toLowerCase","extendUserInputsDictionary","newList","addMatcher","matcher","console","info","zxcvbnOptions","MatchReverse","defaultMatch","passwordReversed","split","join","reversed","CleanPasswords","substr","limit","trieRoot","buffer","finalPasswords","getAllPossibleSubsAtIndex","nodes","character","helper","onlyFullSub","isFullSub","subIndex","changes","lastSubLetter","consecutiveSubCount","hasSubs","sub","newSubs","pop","getAll","getCleanPasswords","getExtras","passwordWithSubs","previousChanges","iUnsubbed","value","change","usedChanges","jUnsubbed","filtered","subDisplay","existingIndex","findIndex","MatchL33t","isAlreadyIncluded","newMatch","some","l33tMatch","every","subbedPasswords","hasFullMatch","isFullSubstitution","subbedPassword","matchedDictionary","useLevenshtein","extras","alreadyIncluded","matchedWord","MatchDictionary","L33t","Reverse","passwordLength","passwordLower","dictionaryName","rankedDict","longestDictionaryWordSize","searchWidth","min","searchEnd","usedPassword","isInDictionary","foundLevenshteinDistance","isFullPassword","isLevenshteinMatch","usedRankPassword","rank","MatchRegex","regexes","regex","lastIndex","regexName","nCk","count","coEff","log10","log","log2","factorial","num","rval","guesses","Number","POSITIVE_INFINITY","MAX_VALUE","minGuesses","yearSpace","getVariations","cleanedWord","wordArray","upperCaseCount","char","lowerCaseCount","variations","variationLength","utils","replace","commonCases","commonCasesLength","countSubstring","string","substring","pos","indexOf","getCounts","tokenLower","subbedCount","unsubbedCount","p","possibilities","baseGuesses","uppercaseVariations","uppercaseVariant","l33tVariations","l33tVariant","reversedVariations","calculation","charClassBases","alphaLower","alphaUpper","alpha","alphanumeric","digits","symbols","repeatCount","ascending","firstChr","startingPoints","includes","calcAverageDegree","graph","average","neighbors","estimatePossiblePatterns","turns","startingPosition","averageDegree","tokenLength","possibleTurns","shiftedCount","unShiftedCount","shiftedVariations","round","getMinGuesses","bruteforce","bruteforceMatcher","date","dateMatcher","dictionaryMatcher","regexMatcher","repeat","repeatMatcher","sequence","sequenceMatcher","spatial","spatialMatcher","separatorMatcher","getScoring","scoring","extraData","estimationResult","matchGuesses","guessesLog10","scoringHelper","optimal","excludeAdditive","separatorRegex","fillArray","size","valueType","makeBruteforceMatch","update","sequenceLength","estimatedMatch","estimateGuesses","pi","shouldSkip","competingPatternLength","competingMetricMatch","bruteforceUpdate","passwordCharIndex","tmp","lastMatch","unwind","optimalMatchSequence","candidateSequenceLength","candidateMetricMatch","unshift","mostGuessableMatchSequence","matchesByCoordinateJ","optimalSequenceLength","getGuesses","MatchRepeat","omniMatch","greedyMatch","getGreedyMatch","lazyMatch","getLazyMatch","baseToken","setMatchToken","getBaseGuesses","normalizeMatch","hasPromises","Promise","all","baseMatch","then","resolvedBaseGuesses","greedy","lazy","lazyAnchored","resolvedMatches","baseAnalysis","MatchSequence","MAX_DELTA","lastDelta","delta","charCodeAt","absoluteDelta","sequenceName","sequenceSpace","getSequence","test","MatchSpatial","SHIFTED_RX","graphName","checkIfShifted","lastDirection","prevChar","adjacents","foundDirection","curDirection","curChar","adjacentsLength","adjacent","adjacentIndex","RegExp","MatchSeparator","getMostUsedSeparatorChar","mostUsedSeperators","memo","_a","_b","getSeparatorRegex","mostUsedSpecial","isSeparator","matchAll","Matching","promises","Matcher","usedMatcher","response","resolve","reject","catch","error","SECOND","MINUTE","HOUR","DAY","MONTH","YEAR","CENTURY","times","century","TimeEstimates","translate","displayStr","estimateAttackTimes","crackTimesSeconds","onlineThrottling100PerHour","onlineNoThrottling10PerSecond","offlineSlowHashing1e4PerSecond","offlineFastHashing1e10PerSecond","crackTimesDisplay","scenario","displayTime","score","guessesToScore","DELTA","base","timeKeys","foundIndex","time","warning","getDictionaryWarningPassword","isSoleMatch","getDictionaryWarningWikipedia","getDictionaryWarningNames","getDictionaryWarning","dictName","isAName","defaultFeedback","Feedback","setDefaultSuggestions","getFeedback","extraFeedback","longestMatch","getLongestMatch","feedback","getMatchFeedback","slicedSequence","func","wait","isImmediate","timeout","debounce","args","context","later","shouldCallNow","clearTimeout","setTimeout","getTime","createReturnValue","start","timeEstimates","matchSequence","calcTime","attackTimes","main","matching","zxcvbn","zxcvbnAsync"],"mappings":"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","x_google_ignoreList":[4]}